(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{531:function(e,t,n){"use strict";n.r(t);var o=n(14),a=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"design-in-practice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#design-in-practice"}},[e._v("#")]),e._v(" Design In Practice")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Speaker: Rich Hickey")])]),e._v(" "),t("li",[t("strong",[e._v("Conference: "),t("a",{attrs:{href:"https://clojure.org/events/2023/clojure-conj-2023--1880831835",target:"_blank",rel:"noopener noreferrer"}},[e._v("Clojure Conj 2023"),t("OutboundLink")],1),e._v(" - April 2023")])]),e._v(" "),t("li",[t("strong",[e._v("Video: "),t("a",{attrs:{href:"https://www.youtube.com/watch?v=fTtnx1AAJ-c&list=PLZdCLR02grLpIQQkyGLgIyt0eHE56aJqd",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.youtube.com/watch?v=fTtnx1AAJ-c&list=PLZdCLR02grLpIQQkyGLgIyt0eHE56aJqd"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("strong",[e._v("Slides: "),t("a",{attrs:{href:"https://download.clojure.org/presentations/DesignInPractice.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://download.clojure.org/presentations/DesignInPractice.pdf"),t("OutboundLink")],1)])])]),e._v(" "),t("p",[e._v("[Time 0:00:00]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Design in Practice\n\nRich Hickey\n")])])]),t("p",[e._v("Thanks everyone for coming.  It is so great to see all the old\nfriends, and all the new friends, and especially all the very cool\nthings everyone is doing.  I want to doubly thank Alex for scheduling\na talk before mine that was so full of amazing graphics that no one\nwould possibly be able to bear any more, and I could I could leave\nthem out of my talk.")]),e._v(" "),t("p",[e._v("[Time 0:00:26]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Objective - Demystify Design\n\n            not (just) going to the hammock\n                 practice - 'what you do'\n\nconcrete techniques with tangible outputs\ndemonstrate _progress_ 'walk forward'\nactivities you can make PM stories out of\n\n  thus make time for, throughout the dev process\n\n  not pleading for 2 weeks of nebulous 'hammock time' up front\n\nvaluable artifacts that make the effort evident\n\ntips and techniques, not a formal method or anything highfalutin\n")])])]),t("p",[e._v("So this is Design In Practice, and the objective here is to demystify\ndesign somewhat.  I think I have given a few talks in the past that\nwere about a lot of the ideas in design, but left the concrete\npractice of it sort of underspecified.  And it has led to maybe a\ncertain imagined magicness to design that I want to dispel.  I think\ndesign is something that you can learn to do.  I think it is something\nthat has concrete activities, practices, or things that we do.")]),e._v(" "),t("p",[e._v("Oh, by the way, if you are playing word definition Bingo, you are\ngoing to wish you had more than one card today.")]),e._v(" "),t("p",[e._v("And to try to talk you through some of what I think are kind of\nlightweight things that we do, actually really do, in trying to do\ndesign as a team on Clojure and Datomic as we work.  So we are talking\nabout concrete things.")]),e._v(" "),t("p",[e._v('Another thing I want to do is talk about things that you can make into\nactivities.  I think a lot of people struggle when they say, "well, we\nwant to do more design in our shop, but we can never get it\njustified."  We are saying nebulous things like, "I want to take two\nweeks off and think about the problem before we start."  And even if\nyou get that, two weeks at the beginning is not necessarily what you\nare going to need.')]),e._v(" "),t("p",[e._v("So one of the things that is good about reifying activities is that\nthey can become things that go into your project management system as\nstories that you are going to do that will have outputs.")]),e._v(" "),t("p",[e._v('The other thing I want to talk about today is progress.  A lot of\ntimes people say, "I know what design is.  I have seen people doing\nplanning sheets, or diagrams, or things like that.  But I do not\nreally have a sense of: Did I write the right diagram?  Am I\naccomplishing something?"  When we make software, we see it accrete,\nand we see it do more and more stuff every day.  And when we design,\nwhat does it mean to move forward?  Do we know we are moving forward,\nor just spinning around?')]),e._v(" "),t("p",[e._v("So this is not any kind of method.  I do not want to adopt that.  I am\nnot trying to rain on proper methods.  And there are there are plenty\nof really cool design methodologies out there.")]),e._v(" "),t("p",[e._v("[Time 0:02:39]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Design\n\n              design - Latin for 'waiting to code'\n\n_coding happens throughout_\n\nperforming experiments\n\nanswering interim questions\n\nwhy you want a language that supports exploratory programming\nwithout being in a project building context\n")])])]),t("p",[e._v('So we all know, I am just reminding you, Latin for "design" means "not\nbeing allowed to code".')]),e._v(" "),t("p",[e._v("[Audience laughter]")]),e._v(" "),t("p",[e._v("I do not actually think that is true.  In fact, I think that as we\nwill see as we go through the talk that you do coding throughout the\ndesign process.  Not necessarily starting to write your system, but\nexploring what your system might become, learning about the things\nthat are going to be parts of your system, answering questions, and\nthings like that.  And it is one of the reasons why I think it is\nimportant to work in a language where that kind of work has zero\nproject-y kind of overhead.  That you do not need to have started your\nthing, or be in a project context to start doing exploratory\nprogramming.  You open up your editor and you go.")]),e._v(" "),t("p",[e._v("[Time 0:03:28]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Design (cont.)\n\n                'mark out, a plan'\n\nthe emphasis in this talk is about supporting your (team's) reasoning _process_,\n      not just the end-product blueprint-like design\n\n_writing down_ your thoughts helps you form them\n\n       _techniques can guide your thinking and decision-making_\n\n  reified/refined/shared concepts\n\n  onboarding/resumption\n\n  validation\n\n  eventually, documentation\n")])])]),t("p",[e._v('No.  So really "design", the word means to "mark out a plan for doing\nsomething", or at least the meaning that we are going to use in this\ntalk.  I am going to expand that idea to be the entire set of steps\nthat get you from a sense that something should happen in the world,\nto the ability to mark out that plan, the marking out of the plan, and\nthen hopefully the subsequent development of it.')]),e._v(" "),t("p",[e._v("And this marking out is something I think is going to be super\ncritical.  We are going to be writing all the time.  We are going to\nbe putting text in front of our faces and in front of the faces of our\nteammates so we can see what we are thinking about.  And I think this\nis something that is very important for helping you think in the first\nplace.")]),e._v(" "),t("p",[e._v("This is not an archival activity.  This is not about capturing things\nfor posterity.  It is not about creating documentation as you go or\nanything like that.")]),e._v(" "),t("p",[e._v("This is about writing as part of thinking.  Putting something down on\npaper makes it a thing.  It is something that you can then look at and\nnow it becomes an input to you, even though it started in your own\nhead.  It also helps you pick things up when you have left them around\nfor a while, or allows people to join you in your work.  And then\nmaybe eventually you will turn it into something that you will use to\ndocument what happened in the end.")]),e._v(" "),t("p",[e._v("[Time 0:04:48]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Words\n\n           Choose good words, _all the time_\n     not about bikeshedding or premature marketing\n\nprecision in naming == precision in thinking 'before + cut'\n\n          _eschew nicknames, superheroes etc._\n               not semantic/meaningful\n               give cover to fuzziness\n            don't track evolving thinking\n\n_be succinct_ 'gird/gather up'\nbrief, clear and complete\nnot just concise 'cut off', or merely hinted at\n")])])]),t("p",[e._v("So we are going to be writing.  We are going to be talking, but\nespecially writing words down, hopefully, and we can write diagrams\ndown, too.  And I think that choosing good words is super critical.\nIt is something you should do all the time.  And I am not talking\nabout picking the right name for your product or anything like that,\nor doing something that is about marketing.")]),e._v(" "),t("p",[e._v('It is about choosing words that have the meaning that you intend and\nthat help everybody come to a shared understanding of what you mean\nwhen you say something.  This idea of precision and cutting is going\nto come up all the time.  That "cis" part is about cutting.  It is the\nsame part of "decide".')]),e._v(" "),t("p",[e._v("So we we need to be precise when we are saying things so we know what\nis the thing we are saying, and what is not the thing we are saying.")]),e._v(" "),t("p",[e._v("So I do not like nicknames.  No superheroes or anything like that.\nOne of the most horrifying things was arriving at a project and\nfinding a diagram of the project that was: nickname in a box, nickname\nin a box, nickname in a box, with unlabeled arrows pointing from one\nto the other.  You are not helping anyone else, and you are not\nhelping yourself.  These names are not semantic.")]),e._v(" "),t("p",[e._v('And in particular by not being a meaningful name, it means that it\ndoes not have to change when you change your mind.  I called it\n"Kryptonite" or something, "The Flash", and if I change what I am\ndoing it could still be called "The Flash".  It will be fine.  So you\nwant to use precise words.')]),e._v(" "),t("p",[e._v('And the other thing you are going to need to be able to do often is\nsay something rather involved in not much space.  And I think that is\nanother critical skill.  You are going to see me say "succinct" over\nand over and over again in this talk, and it is important to sort of\nunderstand what that means.  Which I did not know what it meant you\nknow from an etymology standpoint, so I looked it up.  It means to\ngather up your toga before battle.  To gird or gather up.')]),e._v(" "),t("p",[e._v("And the important thing is that what you are gathering up when you are\ntrying to be succinct is the entirety of things.  It is not about\nbeing concise.  It is not about being: I have only got six words to\nsay here, so I have got to leave out the critical details because I\nneed to get it done in six words.  So we are going to gather up our\nthoughts.")]),e._v(" "),t("p",[e._v("[Time 0:07:08]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: More Words\n\n      _use the dictionary_ (not just good for writing keynotes)\n                      _go right to the origins_\n                  - most useful/abstract semantics\n              - discover the composition within words\n\na good word later becoming 'wrong' could mean:\n\n  you've changed your mind w/o acknowledging it\n\n  you are drifting from your intentions\n\n    _your thinking will evolve and your words (story titles etc) should also_\n")])])]),t("p",[e._v("The other thing is this dictionary thing.  It is not just good for\nwriting talks.  It is good every day.  We do actually use the\ndictionary while we work.  We get to a point where we need to name\nsomething and we will take out the dictionary.  Everybody is racing\nthrough the thesaurus and trying to find the right word.  And a good\nword -- I cannot state how wonderful I think that is and I encourage\neverybody to go do it.")]),e._v(" "),t("p",[e._v("And especially to get down to the origins where they break apart,\nbecause origins will always show you that most of the words that we\nuse are composite and that prepositional prefix part is full of really\ninteresting things.  Like: Is it towards something?  Is it away from\nsomething?  Is it moving stuff together?  Is it cutting it apart?")]),e._v(" "),t("p",[e._v("I think that doing this fires up the process of abstraction.  You\nstart thinking about things in a way that is not tied to the details,\nbut more about bigger ideas.")]),e._v(" "),t("p",[e._v("The other advantage of using precise words is that you could be\nlooking at this word and trying to communicate something, and it\nbecomes evident that that word is the wrong word.  It might have been\na good word.  And it might be that, in a perfectly fine way, you have\nchanged your mind.  You have evolved your thinking.  You have got some\nnew information and you are doing something different.  But the great\nthing is if you have been using precise words, they will seem wrong\nand you can pause and pick a better word.")]),e._v(" "),t("p",[e._v("[Time 0:08:38]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Technique: Glossary\n\n        _terms are inevitable in tech_\n             valuable shorthand\n\ndon't presume a shared understanding\n\n  define, in one place\n\n  use uniformly and consistently\n\nhelps non-tech folks trying to follow along\n\n_when terms break, fix or abandon_\n")])])]),t("p",[e._v("All right.  So we are going to have our first technique.  The first\ntechnique is: add a glossary to your set of stuff that you are\nbuilding while you are working.  We are going to have all kinds of\nterms and technology that is going to happen.  It is amazing even\namongst technologists, we will say a word, and everybody in the room\nwill have a different idea in their head, even though they have heard\nit and used it over and over and over again.  So do not presume that\neverybody understands what you are saying.")]),e._v(" "),t("p",[e._v("You want a place where you define things, one place where you define\nthings, and then after you have defined it you want to use it\nconsistently.  Do not use words to mean two different things.  Do not\nbe lax about that.")]),e._v(" "),t("p",[e._v("This is hard to do, I think, in general, so it is an objective.  No\none does it perfectly.  This is stuff to aspire to.")]),e._v(" "),t("p",[e._v("And then the other thing is if something breaks, fix it or drop it.\nSo some of these artifacts and some of these techniques are things\nthat are ephemeral.  You are going to do them and and you are going to\nmove on.  But this is one that you have to maintain.")]),e._v(" "),t("p",[e._v("[Time 0:09:39]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('slide title: Example: Glossary\n\nTerm         Meaning\n\nlocality     A property of data: It is a measure of the distribution\n             of datoms you need to find, across segments as seen from\n             the perspective of one of the indexes.\n\naffinity     A strategy for assigning partitions, where you say that\n             things are related and should be in the same partition,\n             and thus grouped together in storage\n\n             (could be coaligned with another entity, with time, with\n             a value, with a batch)\n\npartition    See https://docs.datomic.com/on-prem/schema/schema.html#partitions\n             Partitions group data together (in storage), providing\n             locality of reference when executing queries across a\n             collection of entities.\n             Entities in the same partition to sort and be stored\n             together in E-leading indexes, i.e. EAVT and AEVT.\n             Partitions are associated with entity ids, and are named\n             by keywords, or referred to by index in a space.\n             Encoded as hi bits in entity ids.\n             Partition entity ids are suitable as arguments to\n             d/terpid, d/entid-at, and :db/force-partition\n\nexplicit partition\n             partition associated with an explicitly-created, named\n             partition entity\n              datomic comes with 3 explicit partitions: :db.part/db\n             :db.part/user and :db.part/tx\n\nimplicit partition\n             a partition that can be referred to by its index in a\n             range of integers 0<=x<524288.  These partitions have\n             entity ids, and they require no explicit installation.\n             Their entity ids consist of: part=index with the 20th bit\n             set, eidx=0\n\n             In larger applications, you may want to spread data\n             across a larger number of partitions.  Implicit\n             partitions provide a mechanism for this.\n             Implicit partitions provides a way to manage a large\n             number of partitions numerically and algorithmically.\n\n             old ref to partition sharding\n\nprimary      the owning side of affinity, use to choose partition for\n             related (e.g. the customer)\n\nrelated      the "owned" side of affinity, gets partition from primary\n             (e.g. some activity entities related to a particular\n             customer)\n')])])]),t("p",[e._v("So this is an example glossary.  You probably cannot see that.  I\nthink I worked on how I can make you be able to see a little more.\nBut this is a real one talking about a feature.  We have a bunch of\nvery specific words that we are using to talk about locality,\naffinity, and partitions in Datomic.  And so this is a thing that we\nhave, and that we maintained through a project that lasted eight\nmonths or so.  So I encourage you to do this.")]),e._v(" "),t("p",[e._v("[Time 0:10:09]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Questions\n\n          _a most powerful thinking tool_\n\nto formulate a question is to reify what you seek\n\ngetting questions right is half the battle\n\n_questions provoke_, often novel thinking\n\n  logic (just) helps us rule out some of it\n")])])]),t("p",[e._v("All right.  So the other thing we are going to be doing as part of an\noverarching sense of skills is asking questions.")]),e._v(" "),t("p",[e._v("This is a very powerful tool: asking questions.  And it is an old\ntool.  And one of the beautiful things about asking a question, and\nformulating a question, is: you have made clear that you are looking\nfor something.  That there is a thing that you want.")]),e._v(" "),t("p",[e._v("And I think that we state things all the time.  And when you state\nthings, your intentions are not evident.  When you ask things, not\nonly do you want to try to get an answer, but what you need becomes\nevident.")]),e._v(" "),t("p",[e._v("So I think asking good questions is a skill.  It is another one of\nthese things that if you do it more often you will get better at it.\nThe other thing I think is an aspect of questions is that they are\nprovocative.  They poke you.  And of course when you ask a question of\nsomeone else, they feel like they have been poked.  So you have to get\ngood at asking, and being asked, and being comfortable with the\nquestioning process of something.  That is a positive thing.")]),e._v(" "),t("p",[e._v("Logic is an important part of making decisions and solving problems,\nbut it is mostly a negative thing.  I mean, we use logic to say: no,\nthis does not hold.  This is inconsistent.  If this is true, that\ncannot be true.  It is mostly a way we use to rule things out.")]),e._v(" "),t("p",[e._v("[Time 0:11:36]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Technique: The Socratic Method\n\n              _interrogate 'ask together'_\n            examine an idea dispassionately\n   questioning its underlying assumptions, consistency\n\nDispassionate 'without suffering'\n\n  you are not your idea\n\n  you are a source of ideas, some better than others\n\n_We don't define/opine the truth, we discover it_\n\n'The Socratic Method: A Practitioner's Handbook' - Farnsworth\n")])])]),t("p",[e._v("So another technique I recommend is to discover, read about, and\nutilize the Socratic method.  This is a proper thing with a lot of\nhistory behind it, obviously, and some good organized descriptions.")]),e._v(" "),t("p",[e._v("It is an activity you do together.  It is not like a leader torturing\npeople with questions, although my teammates will disagree with that\nstatement.  But it means to sort of work together on trying to find\nthe truth by asking and answering questions.  By taking an answer to a\nquestion and exposing that answer to further examination, eventually\ntrying to get to the truth.")]),e._v(" "),t("p",[e._v("And I talked before about questions being provocative.  It is supposed\nto be a dispassionate examination of ideas.  And that means not\nsuffering.  And I think that it is a big challenge as you try to do\nSocratic method with teams, this is not common, and I think socially\nthis kind of dialogue has fallen away, and its use as a skilled\npractice amongst people who are cooperating has fallen away.  So it\njust seems like a form of argument or attack or hostility or something\nlike that.  That is not what it is.")]),e._v(" "),t("p",[e._v("So one of the things I recommend is you try to detach yourself from\nyour own ideas.  Even when you do this by yourself, you should be\nthinking about your ideas as things you are going to pose and shoot\ndown.  And do that over and over and over again and not get attached\nto your ideas, not co-identify with your ideas.  And the whole idea\nhere is that there is some objective truth and we are trying to find\nout what it is.  We are not inventing it.  It is not coming out of our\nheads.  We are discovering it.")]),e._v(" "),t("p",[e._v("If you want to learn more about the Socratic method I recommend this\nbook.  It is really fantastic.  There is a bunch of history maybe at\nthe beginning you would skip, but I think it is great.")]),e._v(" "),t("p",[e._v("[Time 0:13:33]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Father Watson's Questions\n\nWhere are you at?\n\nWhere are you going?\n\nWhat do you know?\n\nWhat do you need to know?\n\n\nDevs are good at the first two, but those miss 'why?'\n")])])]),t("p",[e._v("So some of the the biggest Socratic wizards in the universe are the\nJesuits.  And I was lucky enough to study with the Jesuits back in\nhigh school.  And my homeroom teacher was father Watson, a Jesuit.\nAnd he would always be asking us these four questions.  And he would\nask us these questions in physics class and in algebra class as a way\nto do the work, do the problem.")]),e._v(" "),t("p",[e._v("This stuff makes sense when you are looking at a problem.  What have\nyou got?  I have got X, and I know Y, and I am trying to find X and\nthe stuff's over here.")]),e._v(" "),t("p",[e._v("Where are you going?  I am going to try to discover what X is.  I know\nX.  I need to know Y.  What are you going to do?  I am going to try to\nisolate Y by moving stuff over to the other side.  And that was all\nfine.")]),e._v(" "),t("p",[e._v('But he also asked us these questions in homeroom as life questions\nWhere are you at?  Where are you going?  What do you know?  What do\nyou need to know?  And I think that as developers this "Where you are\nat?" "Where you are going?"  This is what we do we are good at.  This\nis stand up.  What did you make yesterday?  I made a bread box.  What\nare you making today?  I am making a toaster.')]),e._v(" "),t("p",[e._v("And then checking stuff off.  And you are busy doing things, but you\nare not often talking about why you are doing the things.  And the\nimportant part of these latter two questions is that you are now\ntalking about why you are doing things from the perspective of moving\nyour knowledge forward.")]),e._v(" "),t("p",[e._v("[Time 0:14:59]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Technique: Reflective Inquiry\n\n                            Understanding            Activity\n----------------------------------------------------------------------\nStatus 'to stand'       What do you know?          Where are you at?\n----------------------------------------------------------------------\nAgenda 'to be done'     What do you need to know?  Where are you going?\n\n\nthis is a framework that can be applied throughout the design process\n\n       _note the importance of thinking about your thinking_\n                         reflect - 'bend back'\n\n  inquiry - advancing knowledge, is the driver\n")])])]),t("p",[e._v("So we are going to break down these four questions into two axes and\ntwo stages.  One is the understanding axis.  What is happening to our\nunderstanding?  How is our understanding moving forward?  We\nunderstood this much.  Now we are going to understand some more.  I\ntalked about when we are dev-ing, we know when we are getting progress\nbecause we are creating more code, and maybe more features and the\nsoftware can do more things.")]),e._v(" "),t("p",[e._v("When we are designing, what are we creating?  I am going to say one\nway to think about design is that you are creating understanding.  You\nare expanding your understanding.  The driver for activity should be\nexpanding your understanding.")]),e._v(" "),t("p",[e._v("You are going to take the two questions in each thing and say one is a\nstatus question.  Right?  What do we know right now?  What have we got\nin hand, for both axes?")]),e._v(" "),t("p",[e._v("And then the other is: what do we want to do next?  And we are going\nto drive what we do next -- that activity side -- from what we want to\nknow next, what we want to understand next.")]),e._v(" "),t("p",[e._v("And I think what is cool about this is that this framing -- I mean,\nFather Watson asked us these questions all the time, over and over and\nover again.  This is a frame you can take out on any day and say:\nWhere am I at?  What do I know?  What do I need to know?  What do I\nwant to do about it?  And as we talk about the different phases of\ndesign, we will talk about the fact that this framing can be used over\nand over.")]),e._v(" "),t("p",[e._v("The other thing I want to talk about here just briefly is: look at how\nthis is reflective.  You are thinking about your thinking.  This is\nsuper important.  Being aware of what you are thinking about helps you\nthink.  It also helps agenda-ize your background thinking.  So that is\nwhere it becomes reflective.  So we will call this reflective inquiry.")]),e._v(" "),t("p",[e._v("[Time 0:16:42]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Technique: PM Top Story/ticket\n\n    Several design techniques contribute to your 'top' story in PM\n\nLooking to always create structured stories with sections for:\n\n  Title\n\n  Description\n\n  Problem Statement\n\n  Approach\n\n_Design stories_ contribute to _building a 'top' story_\n")])])]),t("p",[e._v('I just want to talk a little briefly here before we dig into the steps\nthat I will be talking about contributing to this top ticket.  One of\nthe challenges I find people have is they have these project\nmanagement systems, and they are like, "We are going to make a thing."\nAnd they start writing tickets.  And it is like, "You have no idea\nwhat you are doing yet.  How could you write a ticket?  And how could\nyou even know what your tickets are supposed to be?"')]),e._v(" "),t("p",[e._v('And you need to have a ticket for what your tickets are going to be.\nYou need to have a ticket that says, "This is what the overarching\nplan is."  And the thing is that ticket, it is neither the first\nticket, nor is it the last ticket.  It is sort of an early ticket, the\ntop story, that says, "With a good understanding of what is going on,\nthis is our agenda."')]),e._v(" "),t("p",[e._v("Before that ticket, though, you should be doing some design work that\ncontributes to the initial story to saying: We have a mission.  We\nunderstand the problem.  We are going to take it on.  This is the\napproach we are going to take, and this is how we are going to do it.")]),e._v(" "),t("p",[e._v("I think all stories should have these four sections.  I will talk more\nin detail about them in a second.  A title.  A description of the\nsituation.  A problem statement, which we will talk about more.  And\nthen eventually, after you have done some design, the approach you are\ngoing to take to doing it.")]),e._v(" "),t("p",[e._v("So when I talk about stories contributing to the top story, I am\ntalking about early design stories, right?  We said we want to\nagendaize design activity.  But we are going to have early stories\nthat are about doing design.  They are going to contribute to a top\nstory, which will be sort of your lead story to move forward.")]),e._v(" "),t("p",[e._v("[Time 0:18:12]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Example: Story\n\nSupport Java Streams in Clojure's seq function\n\nDescription\n\nAs Java Streams become more pervasive, users struggle with being\nunable to process them using Clojure's standard library, which does\nnot accept them.\n\nProblem\n\nJava Streams are not seqs, nor do they implement any interfaces to\nwhich Clojure already bridges, thus are not accessible to Clojure's\nfunctional operations.  Furthermore, they are stateful and not\nfunctional, and require special handling.\n\nApproach\n\nJava streams are stateful (like iterators) but we need the ability to\nseq (like `iterator-seq` which caches from stateful iteration),\nreduce, and into from a stream.  Once we have that, we can leverage\nexisting Clojure seq/transducer tech to manipulate stream.\n\nCreate:\n\n+ Reduce support via `Stream.reduce`, needs BinaryOperator (see\n  functional interfaces story)\n\n+ `stream-seq!` similar to `iterator-seq` - creates a seq as it reads\n  stream\n\n+ `into` support via new `stream-into!` - implemented with Collector,\n  and utilizing transients etc.  Note these will be 'terminal'\n  functions on the Stream.\n\nPlanning Sheet: https://docs.google.com/spreadsheets/d/1gmVNHCa6\n[portion redacted] 3dy_-TcE/edit#gid=1073327933\n")])])]),t("p",[e._v("All right.  So this is an example -- sorry, this is not an example top\nstory.  It is just an example of a story with a decent shape.  There\nis this thing people are talking about.  I wish I could use Java\nstreams in Clojure seq functions.")]),e._v(" "),t("p",[e._v("The description, which is about the situation in the world, without\nnecessarily talking about what is wrong.")]),e._v(" "),t("p",[e._v("The problem, which is talking about what the challenge or obstacle is\nto that.")]),e._v(" "),t("p",[e._v("And then the approach.")]),e._v(" "),t("p",[e._v("This talk is going to dig into the details of all these things.  But\nthat is what a story is.  And the top story will look like this, but\nit will be about the overarching objective.")]),e._v(" "),t("p",[e._v("[Time 0:18:48]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Design Progress\n\n          _measured by increasing understanding_\n                of the truth of the world\n            and your opportunities within it\n\ndecisions made _and why_\n\n  not checking off some process/method or design artifact list\n\n  or making a plan from your first idea\n")])])]),t("p",[e._v("All right.  So I sort of talked about this already.  Design progress,\nwe are going to measure in terms of increasing our understanding, and\ntracking the decisions we made, but importantly why.")]),e._v(" "),t("p",[e._v('What is important is that this is not a checklist kind of thing.  I am\nnot going to say that any of the activities I am enumerating are\nnecessary, or that you should put them in a list when you get home and\nthen say, "we are going to do Rich Hickey design by checking off these\nthings."')]),e._v(" "),t("p",[e._v("That is not it.  You are going to do whatever of these things make\nsense in order to move your own understanding forward.")]),e._v(" "),t("p",[e._v("[Time 0:19:23]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Design Phases\n\n    _not everything with any linearity is a 'waterfall'_\n           nor do you want 'iterative development'\n               iterate == Latin for 'do-over'\n              better: incremental - 'grow into'\n\nmore like a hike up the (understanding) mountain, not always up, but trending up\n\nbeing able to name phase 'appearance' helps with 'where are you at?'\nnot monotonic - ok!  _stay open-minded_\n\n  this is when change is cheapest\n\n_be explicit about backtracking_\n")])])]),t("p",[e._v("So I do think that this moving forward, this linearity, of design is a\nreal thing.  There is this tremendous pushback, or there was a\ntremendous pushback, against waterfall development.  This idea that\nyou analyze your design, you spec, you code the thing, and then you\ndeliver.  And isn't that horrible?  Isn't that awful?")]),e._v(" "),t("p",[e._v("And it was awful, because I think there were organizational structures\nput in place that had one person doing this part, and then dumping on\nthe next person who did this part, and then dumped on the next person.\nSo I get handed this thing that was like: do you realize all these\nthings about what you did were not right?")]),e._v(" "),t("p",[e._v('But we have replaced that with a non-idea, which is this idea of\niterative programming.  And this Latin for "do-over" is not a joke.\nThat is what iterative means: "do over".  And I do not think do-over\nprogramming is a thing.  I do not think that is a way to make anything\nthat is really good.  Incremental is probably a better word.')]),e._v(" "),t("p",[e._v('So we are going to try to move forward and increase our understanding.\nIt is not monotonic.  We will think something is a good idea.  We will\nlearn some more stuff, and we will say: "Nope!  That was not a good\nidea."  And we will we will try another route up.')]),e._v(" "),t("p",[e._v('But the the cool thing about the word "phase" is that it means\nappearance, like phases of the moon.  Like you you did something, and\nthen you saw the next thing, you saw the next step.  It is not like\nyou programmed it into your nav and it said, "Here is everything that\nis going to happen in your future."  There is no nav for software\ndevelopment.')]),e._v(" "),t("p",[e._v("So it is OK.  It is not monotonic.  You want to stay open-minded.  You\nwill backtrack.  The one thing I will say is: if you are backtracking,\n"),t("em",[e._v("say so")]),e._v(".  So like say: Look, we thought we had an approach that\nworked.  We started to look at some of the implementation details.  We\nfound another problem, or we found that we did not really understand\nthe problem, or we cannot do what we intended.  And now we are going\nback to a prior phase, where we are going to try to find a different\napproach, because there were obstacles in our way.")]),e._v(" "),t("p",[e._v("[Time 0:21:30]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('slide title: Phases\n\n"these are words with a D this time"\n\nDescribe (situation)\nDiagnose (possible problems)\nDelimit (the problem you are going to solve)\nDirection (strategy, approach)\nDesign (tactics, implementation plan)\nDev (build it)\n\nat any time:\n\n  Decide (to do, or not)\n')])])]),t("p",[e._v("So extra points for the King Crimson reference.  Did anybody get the\nKing Crimson reference?  All right.  That was a low that was a low\nprobability.")]),e._v(" "),t("p",[e._v('[The band "King Crimson" has a song "Elephant Talk" where one of the\nlines is "These are words with a D this time"]')]),e._v(" "),t("p",[e._v("All right.  So I am not going to break these down now, because this\ntalk breaks down all these things: describing, diagnosing, delimiting\nthe problem, choosing a direction at a high level, choosing\nparticulars as implementation details, and then doing it.")]),e._v(" "),t("p",[e._v('The one thing is that I do think that these are phases that kind of\nlead into one another.  But on an overarching level, there will always\nbe the potential to do "deciding".  And in this case, when I am saying\n"deciding" I am talking about scoping.')]),e._v(" "),t("p",[e._v('You may encounter a problem, and you have required some level of\nunderstanding of it and said, "We are not doing anything about that."\nOr you have gone through and seen what the various approaches are, and\nfound that no approach will cover more than 80 per cent of the\nproblem.  And you are going to say, "That other 20 per cent we are not\ngoing to do."  Or somebody is going to tell you there is no money for\nyour project, and you will say, "All right.  Well, that is that!"')]),e._v(" "),t("p",[e._v("So this deciding does not have a spot in the order.  You are going to\nbe ready to make decisions, hopefully, at any time.")]),e._v(" "),t("p",[e._v("[Time 0:22:46]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Phase: Describe\n\n                     _the situation_\n                   bug/failure reports\n      feature requests, external and internal (backlog)\n                         context\n\n_What do you know?_ something seems wrong/obstructive in the world\n_What do you need to know?_ the extent of it\n\n_Where are you at?_ observing, listening\n_Where are you going?_\n- initial story title\n- _write down_ a Description in top story\n")])])]),t("p",[e._v('So "describing" literally just means to write things down.  And the\nvery first phase of design is just to write down what you are hearing.\nUsers are complaining about whatever.  People in Slack want X.\nEverybody says Clojure sucks because blah.  Whatever it is.  You are\nhearing things, and you just want to capture that.  Maybe you have\nseen failures in the system.  Maybe what the thing that you are trying\nto take on now has to do with a bug.  So you have a bug report.  So\nyou have exception stack traces or you have logs from production\nsystems.')]),e._v(" "),t("p",[e._v("It does not matter.  What you are going to be doing here is just\nwriting it all down.  Maybe having more logs gathered.  Maybe having\nmore conversations with people to get the information.")]),e._v(" "),t("p",[e._v("So what do you know?  Something seems wrong with the world.")]),e._v(" "),t("p",[e._v("What do you need to know?  You need to know: how big a problem is\nthat?  Where is it?  What are its impacts?  Things like that.")]),e._v(" "),t("p",[e._v("What you are doing?  You are observing and you are listening.")]),e._v(" "),t("p",[e._v("And where are you going?  You are trying to produce two things out of\nthis: an initial story, that top story, the title for that.  And also\nthe description paragraph for that.")]),e._v(" "),t("p",[e._v("[Time 0:23:55]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Technique: Description\n\n                  _one paragraph summary_\n                     situation/context\n               symptoms/reports/observations\n                          requests\n\n_don't_:\n\n  say what the problem is\n\n  accept as facts assertions that imply what the problem is\n\n    instead: X says Y\n")])])]),t("p",[e._v("So description paragraph.  It should just be a paragraph.  It should\nbe the situation you find yourself in, the symptoms, or those problem\nreports.  All those things.  You just want to capture the high level\nview of what they are.  You can point to the details.")]),e._v(" "),t("p",[e._v('The very important thing about this is that you are not saying right\nnow what the problem is.  This is, "I have a headache."  You are not\nsaying, "Because I have a brain tumor", because you could have a brain\ntumor, or you could have not had enough water today, or your eyeglass\nprescription could be wrong.')]),e._v(" "),t("p",[e._v('That is not what you are saying.  You are saying, "patient has a\nheadache."  So you just do not say what the problem is.  You say what\nthe symptoms are, what the complaints are, and things like that.')]),e._v(" "),t("p",[e._v("If somebody has a complaint that seems to incorporate the problem, do\nnot accept that as a fact.  Just say: somebody said they think this is\nthe problem.")]),e._v(" "),t("p",[e._v("OK.  And we are going to write that down in our top story.")]),e._v(" "),t("p",[e._v("[Time 0:24:51]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Phase: Diagnose\n\n         'know across' possible problem(s), of two kinds\n\n1 - bugs/defects\n- yes bugfixes need design (or revisions of a design)\n- lest you just play symptom/code whack-a-mole\n2 - features\n\n_What do you know?_ the symptoms/context\n_What do you need to know?_ the cause(s)\n\n_Where are you at?_ have good description, evidence\n_Where are you going?_\n- applying logic and experimentation\n- to explicate 'unfold'\n")])])]),t("p",[e._v('The next phase is to diagnose the problem.  And "diagnosis", another\ngreat word.  It is not Latin.  It is Greek, and it means "to know\nacross".  That across is the "dia" part, like "diagonal" or\n"diameter".  Same root.  "nose" is "to know".  Again, I just looked it\nup, and it was super cool that this is what it meant, because I do\nthink that this is a crossing.  This is a movement from one possible\nset of knowing to another set of knowing.')]),e._v(" "),t("p",[e._v("And there is two kinds of problems.  I am going to say that we are\ntalking about design for both of these.  One kind of problem, though,\nis: your thing is broken and you are trying to fix it.")]),e._v(" "),t("p",[e._v("Another kind of problem is that people want a feature, or you want a\nfeature, or somebody talked about some feature.  And hopefully that\nfeature is about a problem.  So you need to go from the feature to the\nproblem.")]),e._v(" "),t("p",[e._v("So what do you know?  You know the symptoms and the context.  That is\nwhat you just did.")]),e._v(" "),t("p",[e._v('What do you need to know?  You need to know the cause.  So now we are\ngoing to go and say, "All right.  Well, you have a headache.  Here is\nfive reasons why you might have a headache."')]),e._v(" "),t("p",[e._v("So you have a good description.  That is what you did before.  And you\nhave the evidence that you collected before.")]),e._v(" "),t("p",[e._v("And where you are going is: you are going to try to figure out what\nthe problem is.")]),e._v(" "),t("p",[e._v("[Time 0:26:14]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Diagnose: Bugs\n\n         symptom -> possible problems -> (likely) problem\n\nhypotheses (more than one)\n\npick one (how?)\n\n  use logic first (to rule out)\n\n  'most likely' (intuition)\n\n  makes the problem space smallest (divide and conquer)\n\nUse the scientific method\n")])])]),t("p",[e._v("So I will take these in two different parts.  Diagnosing bugs is a\nknowing across from a symptom to maybe multiple possible problems, and\nfinally down to what is actually wrong.  It is: your eyeglass\nprescription is off.  You need better glasses.  That is why you are\ngetting headaches all the time.")]),e._v(" "),t("p",[e._v('So you will have hopefully more than one hypothesis.  This "more than\none", it is going to come up all the time.  Design is not thinking of\none thing and then writing it out.  That is not designing.  Designing\nis about thinking of more than one thing.  That is like the first\nskill you should have is: if you think it is one thing, just think of\na second thing.  Think of a second possible reason.  If you are on a\nteam, have everybody try to think of a reason.  Of course, if you are\nplaying that game you do not want to go last, so ...')]),e._v(" "),t("p",[e._v('And then you are going to need to address them.  And the one thing I\nwould say here is: address them one at a time.  In other words,\nexplore these things one at a time.  People will get a bunch of ideas\nabout what is wrong and they are like, "I think the system is falling\ndown.  We are getting this exception.  I think it is either: We have a\nbug in our code.  There is a bug in the library code.  There is a bug\nin the JVM.  Solar flares."  And then they will be in the code, or\nrunning something looking for all these possible things.')]),e._v(" "),t("p",[e._v("Just do not do that.  You need to pick one.")]),e._v(" "),t("p",[e._v('Now logic helps you here.  Sometimes you can look at the possibilities\nand say, "You know, it cannot be that.  You do not wear glasses, so\n...  Although, maybe you should."  So we can use logic to rule stuff\nout.')]),e._v(" "),t("p",[e._v("And then there is a bunch of things.  I am not really going to dig\ninto any of these too deeply, because every one of them would take an\nhour.  But you will have a thing that may be most likely, either due\nto your intuition, or it is the thing for which you have the most\nevidence.  It seems like this.  All the evidence seems to be pointing\nat that, from our intuition standpoint.")]),e._v(" "),t("p",[e._v('I think one of the most powerful tools you have here is to make the\nproblem space smaller.  If one of your hypotheses makes the problem\nspace smaller, that is often a good thing to explore early.  I am\noften telling programmers that I work with, "Get that into a smaller\ncontext."')]),e._v(" "),t("p",[e._v("You see a problem in your system.  Well your production system is this\nbig hairy monster.  Can you reproduce this problem with just this tiny\npiece of code?  Can you reproduce it not using your code at all?  If\nyou think it might be a library.  You think it might just be an\nalgorithmic snafu.  Can you just write a little piece of Clojure code\non the side and reproduce it there?")]),e._v(" "),t("p",[e._v("[Time 0:28:48]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('slide title: Technique: Scientific Method\n\n               _out of scope for this talk_\n\nformulate a supporting/refuting conjecture\n\ndesign an experiment\n\n_write result template first_\n- "If this sheet were filled in we\'d know X"\n\ncode it, conduct it\n\napply conjecture logic, repeat\n')])])]),t("p",[e._v("And a great technique here is the scientific method.  Stu's given a\ngood talk about this, and I am not going to do that here.")]),e._v(" "),t("p",[e._v('[ Stuart Halloway, "Debugging with the Scientific Method", November\n2015\nhttps://github.com/matthiasn/talk-transcripts/blob/master/Halloway_Stuart/DebuggingWithTheScientificMethod.md\n]')]),e._v(" "),t("p",[e._v("But for each hypothesis you take on, formulate a conjecture that you\nare going to try to prove or disprove.  You are going to design an\nexperiment, which is going to be some code you get to write.")]),e._v(" "),t("p",[e._v('The one tip I would give you here is that frequently people will say,\n"I am trying to figure out this thing", and then they will go and run\nsome tests.  And then they will need to summarize what they ran.  And\nthen you will look at the summary and be like, "I do not think you\nhave got any information that helps us prove or disprove this\nconjecture."')]),e._v(" "),t("p",[e._v('So the tip I would give you is that if you are going to go and run an\nexperiment, the very next thing you should do, before you write the\ncode that tests the experiment, is to write this spreadsheet or the\ntemplate that says, "This is how we are going to display the results.\nThis is where we are going to put the results."  We are going to have\na column for this, a column for that, and rows for these things.  And\nyou want to look at that template and say, "Yeah, you know what?  If\nwe filled this out, we would know everything we need to know to do\nthis conjecture."')]),e._v(" "),t("p",[e._v("And then write a program that can provide the values for that\ntemplate.  Do not exploratory code and then wonder why you did not get\nthe answers that you need to do it.")]),e._v(" "),t("p",[e._v("[Time 0:30:00]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Diagnose: Feature Requests\n\n               _feature: factura: 'making', of an answer_\n                          _not_ the problem\n\n'we don't have feature X' is never a valid problem statement\n\n  recognize and kill all such statements\n\n_feature -> problem(s)_ for what that feature is (one possible) answer\n\n  what is the user's intention/objective? (not how)\n\n  what is in the way?\n")])])]),t("p",[e._v('OK.  Much trickier, and much more common, and much much more commonly\nneeded, and much less frequently exercised, is the "knowing across"\nfrom a feature request to the actual problem.  So people ask for\nfeatures always, "I wish you had this.  I wish I had that."  You do\nalso, right?  You have your own internal feature requests, your\nbacklog, and things you thought might be good features.')]),e._v(" "),t("p",[e._v('"We do not have feature X" is never a valid problem statement.  If you\nneed proof of this you only need to look at a modern car which has a\ntouch screen where no one said, "I need to slide my finger on some\nrandom piece of glass to a precise point to set my blower in my car\nwhile I am driving."  No one has ever said that, right?')]),e._v(" "),t("p",[e._v('But somebody did say, "We need touch screens because young people will\nnever buy our cars."  This is what happens when you are not talking\nabout the problem.')]),e._v(" "),t("p",[e._v('So we are trying to get from a feature request, to a problem for which\nthat feature is one possible answer.  So there is two things that\nhappen here that were magical.  One was: you went from feature to\nproblem.  The other is: you went from one answer, to maybe an open set\nof answers.  That is where you get the flexibility to do design.  If\nsomebody\'s just going to cram down "it is time to make the toaster",\nwell you may not be solving a problem.')]),e._v(" "),t("p",[e._v("So here are the exercises to say take the feature request, or your own\nfeature idea, and say: what is your intention here?  And then, what is\nin your way?")]),e._v(" "),t("p",[e._v("[Time 0:31:36]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Phase: Delimit\n\n                  _the problem you are going to solve_\n  you might discover multiple problems or bigger problems during diagnosis\n\n_What do you know?_ what the problem is\n_What do you need to know?_\n- how to state it succinctly\n- its scope\n\n_Where are you at?_ have diagnosis\n_Where are you going?_\n\n  making the problem statement\n")])])]),t("p",[e._v("OK.  So now you have got these feature requests turned into problems.\nAnd you have just one more step, I think, before you have a problem\nstatement, which is to try to delimit it.  As you have done this\nthing, you may have a notion of the problem.  You may have had\nconversations about the problem.")]),e._v(" "),t("p",[e._v("Delimiting the problem is really just a matter of saying: what is the\nshort, concise, precise way we are going to talk about the problem\nthat we are going to take on, making software to solve.")]),e._v(" "),t("p",[e._v("So you know what the problem is.  You sort of did that in the\ndiagnosis thing.  All you are trying to do now is state it succinctly,\nand give it some scope.")]),e._v(" "),t("p",[e._v("[Time 0:32:16]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Technique: Problem Statement\n\n        _Succinct statement of unmet user objectives and cause(s)_\n                    not symptoms/anecdotes/desires\n         not remedy/solution/feature - challenge is to filter out\n\nmodify your top story title from symptom -> problem\nadd Problem after the Description in the top story - link to diagnosis work\n\n_subject to refinement_\n- as your understanding increases\n- don't let your problems statements get stale\n\n            This is the most important artifact you will have.\n   if you don't relentlessly focus on a problem you may make something\n                 that doesn't solve any problem\n")])])]),t("p",[e._v('So a problem statement is this succinct statement of unmet objectives.\nWe are talking about what is the user\'s intention, and the cause.  It\nis not the symptoms any more.  We did that in the Describe phase.  And\nit is not the remedy.  That is still in front of us: what to do about\nit.  So if that still exists, if any sort of, "what we are going to do\nabout it" is still present here, you want to get rid of that.')]),e._v(" "),t("p",[e._v('At the point you have got a problem statement, you are going to be\nable to do two things with your top story.  You are going to be able\nto modify ...  The initial story title was probably something like, "I\nthink a toaster might be a good idea."  And now it is, "The user likes\ncaramelized bread."  And there is maybe more than one way to deliver\nthat.')]),e._v(" "),t("p",[e._v("So you are going to modify the title of your top story here to try to\nmake it about the problem.  We have given somebody a way to accomplish\nX.  It is the objective now that is the name of your story.")]),e._v(" "),t("p",[e._v('This is great.  When you work in a project management system that is\nnot like, "Build toaster.  Build bread box.  Build whatever."  But it\nis like, "Solve this problem.  Solve that problem.  Solve that\nproblem."  And you look at what you have done, that ladder list is way\nmore satisfying than the one that is just: feature, feature, feature,\nfeature.')]),e._v(" "),t("p",[e._v("So the other thing you are going to do is you are going to now add\nanother thing to that top story.  You had the title description.  Now\nyou are going to have that problem statement.  This is not forever and\never and ever.  You are going to refine this.  You may have gotten it\nwrong.  You may have a missed subtlety you will discover later.  So\nthis is another thing that needs maintenance.  But it should be short.\nIt should be a paragraph that says what the problem is.")]),e._v(" "),t("p",[e._v("This is super important.  If you do not have this, and if you do not\nrelentlessly focus on it, you run, I think, a very high risk of asking\nsomebody to slide their finger around on a touchscreen while they are\ndriving in order to turn up the radio.")]),e._v(" "),t("p",[e._v("[Time 0:34:20]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Phase: Direction\n\n                        _strategy, approach_\n                   User's intentions and objectives\n                  High-level approaches to addressing\n   e.g. in-proc/out, lib/app, buy/build, modify/add, automatic/manual etc\n\n_What do you know?_ what the problem is\n_What do you need to know?_\n- the user objectives in more detail\n- the possible approaches\n- the best of these\n- what matters in deciding (criteria)\n")])])]),t("p",[e._v("So now I am going to talk about two things: the sort of direction, and\nlike strategy and tactics.  And I am not trying to imply that you will\nalways have this differentiation, or your thing will be layered like\nthis, but certainly if it is a bigger thing you will likely have two\nphases here.")]),e._v(" "),t("p",[e._v("You will have a direction setting moment, and then you will have many\nimplementation decision moments where you are going to be doing\nsimilar things, just at a different level, about a different level of\ndetail.")]),e._v(" "),t("p",[e._v("So at the direction stage it is about strategy.  Strategy means to be\na general, or to lead, and fundamentally it means about where are you\ngoing?  We are all going to follow you that way.")]),e._v(" "),t("p",[e._v("The things you want to capture here is you want to capture those\nintentions and objectives of the user -- not how, but what they are\ntrying to do.  And you are then going to start thinking about what are\nthe ways that you could possibly address it.  We are going to call\nthem approaches.  And these are high level, and I am not trying to\nenumerate them all here.")]),e._v(" "),t("p",[e._v("But a very basic one would, for instance, be: are we going to try to\nprovide an automated solution to make this happen for the user?  Or\nare we going to provide a tool for the user to do it for themselves?\nThat is a kind of directional decision that you want to make.  So you\nknow what the problem is.")]),e._v(" "),t("p",[e._v("What do you need to know?  You need to know about the user objectives\nin more detail.  You are going to dig down a level on the user\nobjectives.  You are going to enumerate a bunch of possible\napproaches.  You are going to try to decide which one is best.  So\nthis is a big phase.  And along the way you are going to have to have\nreflected about what matters to you in making this decision.")]),e._v(" "),t("p",[e._v("[Time 0:34:20]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Phase: Direction (cont.)\n\n_Where are you at?_ Have description and problem statement\n_Where are you going?_\n\n  Enumerating use cases\n\n  Making a strategy DM\n\n    criteria, approaches and tradeoffs\n\n  determining scope\n\n  entering Approach secion on top story\n")])])]),t("p",[e._v("And then what are you going to do about it?  Here have already got the\ndescription, the problem statement.  You are going to want to walk out\nof this phase with enumerated use cases.  You want to walk out of this\nphase with what I will call a strategy decision matrix.  I will show\nyou that in a second, but it incorporates the criteria for deciding\nthe approaches you might take, and the trade-offs of each.")]),e._v(" "),t("p",[e._v('You will also be doing the high level scoping thing, which could\ninclude, "We are not taking this on right now."  But it may include,\n"We are not going to provide an automated solution because that is\ngoing to be too big.  We already have that sense.  But we may provide\na tool for the users to help themselves do this thing."')]),e._v(" "),t("p",[e._v("And eventually you are going to get something to write in your top\nstory that is the approach you are taking.")]),e._v(" "),t("p",[e._v("[Time 0:36:53]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Technique: Use Cases\n\n                 _user's intentions and objectives_\n             in terms of _what_ the user could accomplish\n                       were the problem solved\n                           _not how_ (yet)\n                 make a blank 'how' column for later\n\nshould not start with\n\"the user will push an orange oval button and music will play\"\n\n_later_ you will fill in the 'how' column with that kind of recipe for\nusing the solution you've designed\n")])])]),t("p",[e._v("So use cases.  I think everybody thinks they know how to do use cases.\nAnd that is usually not what I want to see in a use case, because I\nthink again there is two phases.  The best first phase for use cases\nis to talk about only what people intend to accomplish.  What they\nwould like to be different about the world.  What they wish they could\ndo, not how.")]),e._v(" "),t("p",[e._v('So you are going to make a little tiny sheet that says intention,\nintention, intention.  It has got a "how" column that is blank.')]),e._v(" "),t("p",[e._v('I do not believe in this, "Make a card that says the user should put a\npush a button.  It is going to be this color, and it will do this\nthing."  I mean if you want to do that, that is great.  That is not\nwhat this talk is about.')]),e._v(" "),t("p",[e._v('Later, you will have a strategy that you have chosen, and you will go\nback -- actually you will know a little bit more about how you are\ngoing to implement it, and you are going to go back and say, "You know\nwhat we are actually going to do?  We are going to give the user a\nfreaking knob for the volume, please."')]),e._v(" "),t("p",[e._v("[Time 0:37:51]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Template: Use Cases\n\nproblem this sheet is about      | How (given solution design)  | Notes\n---------------------------------+------------------------------+-----\nuser intention/objective         |                              |\nanother user intention/objective |                              |\nanother user intention/objective |                              |\n")])])]),t("p",[e._v('So here we go.  This is what a template for a use case should be.  It\nis not very sophisticated, right?  But always put your problem in A1\n[cell A1, top left corner of a spreadsheet].  Just remind yourselves,\n"this is what we are thinking about".  Now if you leave that off, I do\nnot know what this sheet is about.  You are going to fill in column A:\nobjective, objective, objective.  I wish the radio was louder.  I wish\nI could make the radio louder.  I wish I could turn it off.  I wish I\ncould mute it while my phone call came in.')]),e._v(" "),t("p",[e._v("Not how.  These are just things I would like to be able to do, and\nthen how, you will do later.")]),e._v(" "),t("p",[e._v("[Time 0:38:25]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Example: Use Cases\n")])])]),t("p",[t("img",{attrs:{src:"DesignInPractice/example-use-cases.png",alt:"0:38:25 Example: Use Cases"}})]),e._v(" "),t("p",[e._v("So this is real.  Again, we really do this.  Everybody heard about\nMorse today, maybe?  REBL's successor?  This is a lot of things you\ncould do with Morse.  A lot of context in which you could use Morse,\nand a lot of ways you might want to connect Morse to your stuff.")]),e._v(" "),t("p",[e._v("And we were just sort of brainstorming.  And this is not a giant\nthing.  We sat and talked for 40 minutes, and this is what we did\nwhile we were talking.  We made this sheet.  We filled it out, and we\ntalked about what was what.  But in this use case phase we would only\ndo A, right?  This is a completed story that shows column B, the how,\nas well.")]),e._v(" "),t("p",[e._v("[Time 0:39:08]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title:  Technique: Decision Matrix (DM)\n\n              _a (google or other live-editing) sheet_\n\n    A:1 what decision are you trying to make, for which problem?\n\n_Approaches_ - Columns (but first labels rows)\n_Criteria_ - Rows (but first labels columns)\n_Aspects_ - Cells\n\nsheets > docs\n\n  prose docs create a linearization that makes contrast difficult\n")])])]),t("p",[e._v("So the other big technique in this phase is the decision matrix.  And\nthis is the heart of the talk, is to talk about decision matrix.  I\nused to do this when I was mostly designing by myself in Org mode [an\nediting mode in Emacs https://orgmode.org ], but I am a complete\nconvert that the best way to do this kind of design, in this phase of\ndesign, and this work, is in a spreadsheet.  And in particular, it is\nin a spreadsheet that is a live editing spreadsheet.  So we use Google\nSheets for this thing [ https://www.google.com/sheets/about ].")]),e._v(" "),t("p",[e._v("So what is a decision matrix?  It is a spreadsheet.  It is a\nspreadsheet that more than one person can see at the same time, and\nedit at the same time.  I do not know if somebody else ... I am sure\nMicrosoft has one.")]),e._v(" "),t("p",[e._v("A1 will be: what decision are you trying to make?  What problem are\nyou working on?  Always A1.  If I come up to your project and you want\nsome design mentoring, and A1 is not filled in, guess what we are\ngoing to be working on?  A1.  Have a good problem statement.")]),e._v(" "),t("p",[e._v("You can copy your problem statement right in here.  Often, though,\nthis is more of a specific decision.  But it should be related to\nthat.  Keeping your problem in your face is super important.  It\nshould just be always like this problem is just haunting me.")]),e._v(" "),t("p",[e._v("And I am seeing it, which means I am forced to think about it as an\nexternal stimulus.  That is also critical.")]),e._v(" "),t("p",[e._v("All right.  So what are you going to have?  You are going to have\ndifferent approaches to solving the problem.  These will be your\ncolumns.  The first of the columns will label the rows, but the other\ncolumns will be your various possible approaches.")]),e._v(" "),t("p",[e._v("You will have criteria: how are you going to make this decision?\nThese will be the rows, except the very first row, or two, labels the\ncolumns.")]),e._v(" "),t("p",[e._v("And finally, you have the interior cells, which is the aspects of a\nparticular approach from the perspective of that criteria.  That is\nwhat goes in the inner cell.  I do strongly recommend sheets over docs\nhere.  Docs are linear, and they do not support contrast, which I will\ntalk about in a second.")]),e._v(" "),t("p",[e._v("[Time 0:41:05]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Template: DM\n")])])]),t("p",[t("img",{attrs:{src:"DesignInPractice/template-DM.png",alt:"0:41:05 Template: DM"}})]),e._v(" "),t("p",[e._v("So this is a template for a DM.  I do not think I have to zoom this\none in.  This is not real.  This is just a template.  The upper left\ncorner, A1: what problem are you working on?")]),e._v(" "),t("p",[e._v("[Columns] B C D E are the approaches you want to take.  If you are\nmodifying a system that already kind of does this, or has a lacking in\nthis area, make that the first approach.  The first approach is: do\nnothing.  Where are we at?  What does our system do right now?\nUsually, there will be something not great in that column.  And then\nyou will have other approaches.  I will talk in detail about that in a\nsecond.")]),e._v(" "),t("p",[e._v("And then down the rows are criterion, criterion, criterion.  And then\ninside we have the aspects, where we are going to talk about how the\napproach deals with criterion.")]),e._v(" "),t("p",[e._v("[Time 0:41:50]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: DM Columns: Approaches\n\nfirst row or two describe approach\n- must give you shorthand for talking, yet make clear what about\n- _succinct description_ of approach, use row 2 if needed\n- freeze the approach title/description rows\n\n  if you are modifying something, the first 'approach' should be the status quo\n\n  columns for what others have done in same situation\n\n  and your initial ideas\n\nA DM is about _creating_ a great approach, not merely shopping\n\n         _the answer is often an approach you don't begin with_\n")])])]),t("p",[e._v("So the approach is we are going to label them in the top.  Again, you\nneed to be succinct, but do not take goofy names.  Do not do super\nshorthands.  If somebody walked up to your thing and they read just\nthe first box of column C, would they understand what columns C was\nreally about, or did you shorthand the meaning of it away.  If you\ncannot get it done in something that is more like a title, like in row\none, take a second row and put in a sentence length thing.")]),e._v(" "),t("p",[e._v("You need for what you are talking about to be super clear.  I have\nseen a lot of people just struggle here because they have columns and\nit is not actually clear what this column is about.  What strategy or\nwhat approach this is about.  Put enough detail in there so you can\ndistinguish the two.")]),e._v(" "),t("p",[e._v("And then freeze those rows.  I already talked about using the first\ncolumn, first approach, to be like what you do right now.")]),e._v(" "),t("p",[e._v('You want to think about what other people do.  This is stuff from\n"Hammock-driven Development".')]),e._v(" "),t("p",[e._v('[ Rich Hickey, "Step Away from the Computer, or Hammock-driven\nDevelopment", October, 2010\nhttps://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/HammockDrivenDev-mostly-text.md\n]')]),e._v(" "),t("p",[e._v("And then you are going to have your own first ideas about possibly\ngood approaches.")]),e._v(" "),t("p",[e._v("The main thing I want to do here is, I want to emphasize, this is not\na shopping exercise.  This is not just like: well, I have got what we\ndo, what other people do, and my first idea, and we are going to pick\none.  That is not what it is about.  It is about going through the\nexercise of examining how they differ from each other, what their\nqualities are, and hopefully driving the birth of one or more new\ncolumns, new approaches.  This is a place where you can innovate.  So\nit is not it is not shopping.")]),e._v(" "),t("p",[e._v("[Time 0:43:23]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: DM Rows: Criteria\n\n                    'means of judging/deciding'\n\nFirst column - _succinct descriptions_ of criteria (freeze this column)\nInclude criterion iff salient or relevant, sort by importance, distinction\n\nwill usually include rows for\n\n  fitness for solving the problem (from use cases)\n\n  various '-ilities'\n\n  costs (time, dev effort, $), risks\n\n  compatibility, complexity\n\n  etc - purpose built for problem (reflective)\n")])])]),t("p",[e._v("All right.  Criteria.  This word is very important.  It is not\ncharacteristic.  It is criteria.  Criteria.  It is a means of judging,\ndeciding.  Critic.  Critical.  All those words are about making a\ndecision, and about saying positive and negative things about things\nso that you can judge.")]),e._v(" "),t("p",[e._v("But what is the basis for that judgment?  Well that is something that\nhas got to be reflective.  It is not in the problem.  It is in how you\nfeel about addressing the problem.  I mean that some of it is driven\nby the problem.  If your approach does not solve the problem at all,\nif it does not make the headache go away, well it is not really an\napproach to getting rid of somebody's headache.")]),e._v(" "),t("p",[e._v("So you will have some rows for solving the problem, but you will have\na bunch of other rows, potentially, that are about meta\ncharacteristics of this approach.  How much development time does it\ntake?  Is it compatible with what we have done before?  Is it going to\npossibly break things?  How much does it cost?  How much will it cost\nto operate?  Is it allowed by some regulatory thing?")]),e._v(" "),t("p",[e._v("You are going to have a bunch of things that are candidates for rows,\nbut you should never fully enumerate them in advance.  Every time you\ntake on a problem, you are going to need to be selective about what\nmatters, and only put in what matters.  So you want things that are\nsalient or relevant.  Salient means it is an aspect of this thing that\nsticks out, and relevant means that it is an aspect of this thing that\nmatters to our problem.")]),e._v(" "),t("p",[e._v('If you have one of your columns is a live bunny, and another one of\nyour columns is a tank in a bunny suit, you are not going to have a\nrow that is "what color is the fur?" or "how soft is it?"  You are\ngoing to have a row that says "how much lettuce does it eat?" and "can\nit crush a truck?" and "what kind of ammunition does it need?"  The\nthings that really distinguish these two things.  I do not know how\nmuch does a tank weigh?  We do not want a really, really, heavy bunny.\nAll right.  So it is not characteristics, it is criteria.')]),e._v(" "),t("p",[e._v("[Time 0:45:31]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: DM Cells: Aspects\n\n                     _of approach per criterion_\n   _succinct description_ of how approach handles criterion (or doesn't)\n          avoid y/n/true/false/numeric-rank criteria, and in cells\n\n_avoid judgement in text_, instead use (unsaturated!) cell background color\n\n  Neutral - clear\n\n  Some challenge or negative - yellow\n\n  Seems blocking or failing to address problem - red\n\n  Seems particularly desirable/better - green\n")])])]),t("p",[e._v("And then we are going to have the aspects.  This is, again, a succinct\ndescription that goes in the inner cell.  You really want to write\nsome words here.  You really want to help people understand: when you\nthink about this approach from this perspective, or when you look at\nthis approach from the perspective of this criteria -- that is what\naspect means: look at something.  When you look at it from that, this\nis what you see.")]),e._v(" "),t("p",[e._v("It should be words here, not yes, no, true, false, that kind of stuff.\nTry to say: if it does it, say "),t("em",[e._v("how")]),e._v(' it does it, not that yes it does\nit.  Say how it does it, because you are going to have two different\nanswers that both have a "yes", but how they do it differs.  Write\ndown how they are doing it, not just yes they do it.  Yes, they have\nit.  Do they have a backup strategy?  Yes, yes.  Well, one may use\nfloppy disks, and one may use replication.  So say that.')]),e._v(" "),t("p",[e._v("The other thing you want to do here is: you want to avoid subjective\njudgment in your text.  Do not do that.  Just write what the facts\nare.  When we look at this from this perspective, this is what it has.\nOr maybe, it does not have this.")]),e._v(" "),t("p",[e._v("And then what I would advocate, and what we do, is we use colors,\nwhich you saw before, some colors on the sheet to show subjectivity.\nThis is the "),t("em",[e._v("only")]),e._v(" place that we use subjectivity on the sheet.  If\nsomething is just OK for this, we leave it neutral, clear.  If there\nis some challenge or negative characteristic to the way that this\napproach deals with this criterion, then we will color it yellow.  If\nthe way it does it seems completely blocking -- it is prohibitive to\nus, prohibitive to the user, failing to answer the problem, we will\ncolor it red.  So it is kind of blocking.  And if it is particularly\nnice, desirable or better than the others, we will color it green.")]),e._v(" "),t("p",[e._v('You can, as a shorthand, just start with pros and cons rows.  Here is\nmy approaches.  Here is the pros of this, and here is the cons of\nthis.  But the thing is, maybe you are picking between two libraries,\nand one of the libraries says "I have really low latency" and the\nother one says "I really have high throughput".  And these are their\nfeatures.  Well okay, that is two pros.')]),e._v(" "),t("p",[e._v("But you have not looked at the high throughput one on the basis of\nwhat is its latency, and you have not looked at the low latency one\nfrom the perspective of how is its throughput.  So until you have\nbroken up these things so that every criterion gets its own row, you\nare not going to have the ability to contrast.")]),e._v(" "),t("p",[e._v("What we are trying to do is to get things next to each other that are\ndifferent.  That is what makes our mind go.  We love edges.  We love\nseeing edges.  You need to create edges in your ideas.  That is what\nis going to trigger your thinking.")]),e._v(" "),t("p",[e._v("[Time 0:48:22]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Example: DM\n")])])]),t("p",[t("img",{attrs:{src:"DesignInPractice/example-DM.png",alt:"0:48:22 Example: DM"}})]),e._v(" "),t("p",[e._v("This is a real DM here we are thinking about.  This is not something\nwe are shipping yet.")]),e._v(" "),t("p",[e._v("How do we deal with functional interfaces in Clojure?  There is a lot\nof ways to do it.  This sheet goes, goes over there [as he is\nscrolling to the right up to column G at least].")]),e._v(" "),t("p",[e._v("But there is a concise problem statement in A1: You cannot use Java\nmethods to take Java functional interfaces without using an adapter or\nreify today.  Column B is what we have today.  People are writing\nreify a lot.  They need to know the types that they are trying to\ntarget.  It is a lot of redundant stuff.  That column is kind of a lot\nof orange, which is between yellow and red, and yellow.  And then\nthere are other approaches which are good.  It is rare that something\nis totally amazing.")]),e._v(" "),t("p",[e._v("[Time 0:49:14]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: DM: Tips\n\nAvoid\n_the all-green column_ - are you rationalizing?\n_undistinguished columns_ - find the differences that matter\n_exhaustive or template rowsets_ - s.b. specific criteria, not just characteristics\n_links as primary cell content_ - ok as supplement to summary text in cell\n_hidden comments/popups etc_ - keep things in view\n_phrasing criteria as questions_ - clash with inline questions\n\ninclude questions as soon as they arise!\n\n  put '?' anywhere (approach/criterion/aspect)\n\n    - if you are unsure of importance\n\n    - or the info is unknown\n")])])]),t("p",[e._v("So some tips about doing a good DM.  Avoid the all green column.  That\nis very unlikely.  That is a sign you might be rationalizing.  Nothing\nis totally wonderful.")]),e._v(" "),t("p",[e._v("Avoid undistinguished columns.  If you go through in those two columns\nand they are not different in any way, you are probably missing a row.\nYou are probably missing some criteria that distinguishes them, and\nyou want to find it.")]),e._v(" "),t("p",[e._v("I talked before, you do not want an exhaustive row set.  You do not\nwant a predefined row set, and you do not want every characteristic of\nevery possible approach.  You just want the ones that matter.")]),e._v(" "),t("p",[e._v("And relentlessly move up.  The other nice thing about a spreadsheet\nis: you can move rows up.  You just drag them and they go up.  So keep\npushing up on your spreadsheet on the things that most distinguish\nyour different approaches.  No one cares about pages and pages of\neverything's the same on this from this perspective.")]),e._v(" "),t("p",[e._v("Avoid links or references out as your primary cell content.  Write\nsomething there.  The key here from a thinking standpoint is: you are\nseeing the stuff that matters.  If it is a link, you are seeing\nnothing.  You have got to go break your concentration and go follow\nthe link then.  You can have links as supplements.")]),e._v(" "),t("p",[e._v('Do not use the features of these things that allow comments.  I see a\nlittle triangle in the corner.  What is that?  I have got to hover or\nclick and now it is over here.  If you have a question about\nsomething, or you think it is bad or whatever, just write it on the\ncell next to it, or in the notes.  You will see a lot of these things\nhave "Notes" columns.  Just write it in the notes so it is in\nsomeone\'s face.  Now they do not have to opt into seeing what you\nthink.  You said what you think, and you put it in their way.')]),e._v(" "),t("p",[e._v('And then avoid phrasing the criteria as questions.  This is because\nyou want to be able to write questions in your sheet, and you want to\nbe able to search for them.  As you were going you are like, "I wonder\nif this can do this?  I wonder if this will be fast enough?  I wonder\nif we should be thinking about this thing?"  If you phrase your\ncriteria as, "Does it have this question mark.  Does it have that\nquestion mark," then you cannot search for question mark and find your\nquestions.')]),e._v(" "),t("p",[e._v("[Time 0:51:19]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: DM: Outputs\n\na succinct _description of the problem/decision_ being taken on\na set of _several approaches_, succinctly described\nan explicit and clear expression of _what matters in making the decision_\n_detailed aspects_ for all of the approaches per criterion\n- aligned for contrast\n\nat-a-glance, fine-grained _subjective assessment_\n- subjectivity all in one place (cell color)\n\n  a set of questions for follow up\n\n                _clear benefits + tradeoffs_\n")])])]),t("p",[e._v("All right, so what do you get when you do this?  You are going to have\na good description of the problem.  You are going to have a bunch of\napproaches with good descriptions of those.  You will have made\ndecisions about what matters.  You will have done that introspection,\nso it is reflective.  You will have details about how everything\napproaches it.")]),e._v(" "),t("p",[e._v("And you will have an at-a-glance subjective assessment, so if I am\ncoming into your thing and you have done this, I can quickly see what\nyou think is good or bad, or where you think the trade-offs lie.  And\nall the subjectivity is in one dimension.  If I do not agree with you,\nI can take your sheet, dupe it, and change all the colors to blank,\nand I will be dealing with something with no subjectivity left.")]),e._v(" "),t("p",[e._v("[Time 0:52:02]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: DM: Benefits\n\ncome back later/arrive late - (re)load context\n\nlive group thinking tool - make everything visible as text\n- vs voice + independent notes\n\npromotes shared understanding\n- call out ambiguity, inconsistency etc\n- raise and capture questions and ideas immediately\n\n_birthplace of abstraction_\n\n               _provocation for background thought_\n                        hammock, sleep\n           where new columns and best answers are born\n")])])]),t("p",[e._v("All right, so what are the benefits of having done this?")]),e._v(" "),t("p",[e._v("Well certainly you get to come back later and resume your work.\nSomebody else can join you in the thought process, and arrive late and\ncatch up.  While more than one person is working on this, you all can\nbe looking at the sheet.  This is so much better than just gabbing on\nZoom and having everybody take independent notes, and then maybe\ntrying to reconcile those notes.  We "),t("em",[e._v("always")]),e._v(" make a sheet and stick\nit in our face and type into it while we are talking.")]),e._v(" "),t("p",[e._v('And it means that you are going to have shared understanding.  You are\ngoing to be able to say, "I do not think you are saying that right.  I\ndo not think that that is the case."  That is good.  That is the\nSocratic method, questioning: Is that really true?')]),e._v(" "),t("p",[e._v("The other thing I think happens as you have done this sort of cutting\nup, and pick the criteria, is: you are starting to do abstraction.\nYou are trying to see, well I had five possible choices, but only two\nways to do this.  You are learning the physics of the problem.  There\nis only two ways to do this.  There is only one way to do that.\nEverybody does it the same way.  Maybe there should be another way.\nYou could ask the question.")]),e._v(" "),t("p",[e._v("And you are finding characteristics that maybe you want to lift later,\nas abstraction.  And then this is the kind of thing, if you do this\nduring the day, I promise you, you are going to get new ideas when you\nhit the hammock or the bed.")]),e._v(" "),t("p",[e._v("[Time 0:53:18]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Phase: Design\n\n               _tactics, implementation plan_\n                  the blueprint-like design\n\n_What do you know?_ the problem and the direction we are taking to solve\n_What do you need to know?_\n- the possible implementation approaches\n- the best of these\n- what matters in deciding\n- how the users will use your solution\n")])])]),t("p",[e._v('All right, and then the next phase of design is design.  And I\npurposely made design a phase of design because this design is about\n"mark out a plan for doing it".  This is the actual traditional notion\nof design.  By putting the context of what is design -- because you\nactually cannot start here.  You cannot just say, "I am doing design.\nThis is the first thing I am going to do.  I am going to start\nfiguring about how I am going to make something.  You see now, you\nwill have skipped over all this other stuff that is valuable.')]),e._v(" "),t("p",[e._v("So now you will actually be down to: all right, we have an approach\nchosen to take.  We think it is the eyeglass thing.  Now we are going\nto go and try to figure out how to make it.  Or maybe we figured out\nwe are going to want a knob, and we have to figure out where to put\nit.  And should it be grippy, or should it be slidy?  Hint: it should\nbe grippy.  Should it be detented or not.  Yes, it should be detented.\nYou know.  This kind of stuff.")]),e._v(" "),t("p",[e._v("All right.  So what do we know?  We know the problem and the direction\nalready.  And you see this.  You are gaining power.  You are gaining\nvelocity.  You are gaining confidence.  You know the direction you are\ngoing to take.")]),e._v(" "),t("p",[e._v('What do you need to know?  Well you you have got maybe an approach you\nare going to take, but not exactly how you are going to implement it.\nRight now is where you would be talking about like, "What is the API\ngoing to look like?"  We have decided to make an API.  Or, we have\ndecided to make a library for people to use to do it on their own.  We\nare not going to automate it.  But now you would be talking about\nlike, "What is that API going to look like?  What is the signatures\ngoing to be?"')]),e._v(" "),t("p",[e._v("The same thing is going to happen.  Hopefully, you are going to create\nmore than one idea.  Then you are going to try to pick the best.  You\nare going to use the same techniques to decide.  Criteria.")]),e._v(" "),t("p",[e._v('The other thing that is new here and different is before with approach\nwe wanted to know in detail what are the user\'s intentions.  Now we\nget to talk about: as we make implementation decisions, we can go back\nto that use cases sheet and say, "this is how they will accomplish\ntheir intention, given the solution that we are intending to make."\nAnd the implementation decisions we are choosing right now.')]),e._v(" "),t("p",[e._v("[Time 0:55:25]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Phase: Design (cont.)\n\n_Where are you at?_ Have use cases and strategy/direction DM\n_Where are you going?_\n\n  implementation approach DM(s)\n\n  design (plan) diagrams\n\n  implementation decisions\n\n  add detail to Approach section of top story\n\n  fill in 'How' column in Use Cases\n\n    how user can accomplish using feature/API etc\n\n    _possible scope adjustment or backtracking if impl poses new challenges_\n")])])]),t("p",[e._v("So what do you got?  You have the use cases and you have this DM.  You\nare going to have more DMS.  These can be very light 15-minute\nexercises.  We need to make this choice.  We need to do something\nhere.  What are our choices?  Boom.  What is the trade-offs of these\nthings?  This, that, or the other.  It can be very lightweight.  I am\nnot talking about suffering over every decision.  I am talking about\njust trying to be considerate, as often as you can.")]),e._v(" "),t("p",[e._v("This is when you may do diagramming.  You are certainly going to, as\nan outcome of doing these DMS, you are going to make implementation\ndecisions.  You are going to go back to that part of the story which\nis the approach, and which has the direction in it right now, and you\nare going to add the details.")]),e._v(" "),t("p",[e._v("I do not know if you remember back to the other thing, but we said\nlike what are we going to do about this problem?  We are going to have\nthese three APIs.  And you are going to be able to do this.")]),e._v(" "),t("p",[e._v('And then you are going to go back to your use cases and fill in the\n"How?"  column.  It is certainly possible that in doing -- I talked\nabout this before -- in doing the implementation details, you may\nactually need to go back and alter your scope.  We thought we were\ngoing to do this, and we did not find a way to implement it that was\nnot going to be too much work, or too possibly risky in altering code\nthat we already had.  And we do not want to take on the risk of that\nmuch change.  And then you are going to back up.')]),e._v(" "),t("p",[e._v("[Time 0:56:48]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Example: Impl DM\n")])])]),t("p",[t("img",{attrs:{src:"DesignInPractice/example-impl-DM.png",alt:"0:56:48 Example: Impl DM"}})]),e._v(" "),t("p",[e._v("This is a real implementation DM for something we did already ship.\nWe had this problem.  Newcomers to Clojure do not know Java.  They do\nnot know there is a Java math thing, and they do not know how to do\ncosine.  And it is just this hurdle for people.")]),e._v(" "),t("p",[e._v('But there is a lot of different things you could do about it.  You\ncould do nothing, and say, "All right, we will give you a better way\nto find the Java doc."  So we have these characteristics.  The same\nthing.  We could do static imports.  We could have a program that gens\nthe thing from the Java, which is what we ended up doing.  Or we could\nhand code and we were looking at these trade-offs.  So that is how we\ndo that.')]),e._v(" "),t("p",[e._v("[Time 0:57:35]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Technique: Diagrams\n\n              _details out of scope for this talk_\n\nimportant complement for tables and prose, better for:\n\n  architecture\n\n  flows\n\n  relationships\n\n  representations/layouts\n\n  UI\n\n        _diagram your problems, not just your solutions_\n")])])]),t("p",[e._v("Diagrams are out of scope.  Again, I could talk for an hour about\nthis.  But you you want to use this when prose and tables are\ninadequate.  A lot of times when you are talking about flow,\nrelationships between things, visual representations are super\nimportant.  So you want to do that.")]),e._v(" "),t("p",[e._v("The one tip I would give you here is: this is not just about\ndiagramming what you are going to do.  You should diagram what is\nwrong.  If you do not know how things are going to flow.  If you have\nthis problem of: I only know this here, and in our intention we need\nto know it over there, well, draw the diagram that shows: I have a\nquestion mark about how this gets over there.  Because we presume that\nthis knowledge would be here, or would be in this database, and we\nhave not decided yet how it gets there.  So diagramming your problem\nbefore you diagram your solution is a good technique.")]),e._v(" "),t("p",[e._v("[Time 0:58:24]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: Phase: Dev\n\n                            build it\n\nYou _understand_ why you are making the thing - solving this problem\nYou _know how_ to make it - few or no unknowns\nYou are _confident it will work_\n- lots of supportive material\n- keeps you on track\n- facilitates adding others to team\n\nthe solutions will be _smaller_ and _more general_ due to having designed it\n\nHave at, with you dev toolkit and techniques\n\n  but don't build something on the same day you think of it\n")])])]),t("p",[e._v("And finally, finally you have done all this design.  You have got this\ntop level story that has what is wrong.  What is the context?  What is\nactually the cause?  What is the strategy you are going to take?  What\nare the details of the implementation choices you are going to make?\nYou know why you are doing things.  You know how you are going to\nbuild it.  You should have a very high confidence that what you are\ngoing to build is going to work.  You have a ton of supportive\nmaterial.")]),e._v(" "),t("p",[e._v("This will help you do it.  When you are trying to do it, you do not\nhave to remember.  You will look at the work you did before.  If you\nneed to grow the team or hand it off to someone else, you have a lot\nof stuff to give them.")]),e._v(" "),t("p",[e._v('And then the contention I will make in this talk is that: I believe\nvery strongly that if you take this kind of rigorous approach to doing\ndesign, the thing you will make in the end will be smaller and more\ngeneral.  A lot of times people say, "We like this about Clojure.  We\nlike that about Clojure."  And it comes from this kind of a thing.  It\nis just like you keep cutting it down and cutting it across, and you\nend up with small things that are more composable and more general due\nto having done the design.')]),e._v(" "),t("p",[e._v("So obviously there is a million talks about how to do dev.  I think\npeople have strategies for CI whatever.  This is not that talk.  The\none tip I would give you is: do not build something on the same day\nyou think of it.  Why not?")]),e._v(" "),t("p",[e._v('You have not slept on it.  I promise you, if you do this kind of work\nduring the day, and you start coding in the afternoon, the next\nmorning you are going to be like: "That?  No.  We should not have done\nthat."  So just do not even bother.  Go out for coffee, or talk about\nsomething else.  But give it a day.')]),e._v(" "),t("p",[e._v("[Time 1:00:07]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('slide title: Thanks!\n\nDan (for all the notes), Stu, Alex and my other Socratic victims\n[strikethrough on "victims"] friends on the Clojure and Datomic teams.\n')])])]),t("p",[e._v("So, thanks.  I want to thank especially Dan.  He is not here, but he\nhas been tracking me, doing a lot of mentorship of design and taking a\nlot of notes, which really helped me build this talk.  And Stu and\nAlex and all the people I work with on the Clojure and Datomic teams.\nWe do this.  I think it is hard to do, and I think it is hard to\nlearn.  But I think you can do it.  You can learn it.  And with\npractice ...")]),e._v(" "),t("p",[e._v("[Time 1:00:45]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("slide title: \n\nInspiration exists, but it has to find you working\n\n                                 -- Pablo Picasso\n")])])]),t("p",[e._v("... you can accomplish things.  So thank you very much.")]),e._v(" "),t("p",[e._v("[Applause]")])])}),[],!1,null,null,null);t.default=a.exports}}]);