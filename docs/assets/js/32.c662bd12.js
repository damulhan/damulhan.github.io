(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{404:function(e,r,n){"use strict";n.r(r);var o=n(14),t=Object(o.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"clojure의-데이타-구조"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#clojure의-데이타-구조"}},[e._v("#")]),e._v(" Clojure의 데이타 구조")]),e._v(" "),r("p",[e._v("Clojure는 함수형 프로그래밍 언어로서, 데이터 구조와 관련된 많은 기능을 제공합니다. Clojure의 데이터 구조는 모두 불변성(immutable)을 가지며, 이를 이용해 병행성(concurrency) 문제를 해결하고 코드의 안정성을 높일 수 있습니다.")]),e._v(" "),r("p",[e._v("Clojure의 데이터 구조는 크게 세 가지 유형으로 나뉩니다.")]),e._v(" "),r("p",[e._v("시퀀스(Sequence)")]),e._v(" "),r("p",[e._v("시퀀스는 Clojure에서 가장 기본적인 데이터 구조입니다.\n시퀀스는 일련의 값들을 표현하며, 각 값은 순서대로 연결됩니다.\n시퀀스는 다양한 함수를 이용해 연산할 수 있으며, 예를 들어 map, filter, reduce 등의 함수를 이용해 데이터를 변환하거나 처리할 수 있습니다.\n맵(Map)")]),e._v(" "),r("p",[e._v("맵은 key-value 쌍으로 구성된 데이터 구조입니다.\n맵은 중복된 key를 가질 수 없으며, 값의 타입은 제한이 없습니다.\n맵은 다양한 함수를 이용해 연산할 수 있으며, 예를 들어 assoc, dissoc, merge 등의 함수를 이용해 맵을 생성하거나 수정할 수 있습니다.\n벡터(Vector)")]),e._v(" "),r("p",[e._v("벡터는 일련의 값들을 순서대로 저장하는 시퀀스와 유사합니다.\n벡터는 각 값에 인덱스를 부여하므로, 인덱스를 이용해 빠르게 접근할 수 있습니다.\n벡터는 시퀀스와 유사한 함수를 이용해 연산할 수 있으며, 예를 들어 conj, pop, subvec 등의 함수를 이용해 데이터를 추가, 제거하거나 자르는 등의 작업을 수행할 수 있습니다.\nClojure의 데이터 구조는 모두 불변성을 가지므로, 데이터를 수정하는 작업은 기존 데이터를 변경하는 것이 아니라 새로운 데이터를 생성하는 것입니다. 이를 통해 코드의 안정성을 높이고, 병행성 문제를 해결할 수 있습니다. 또한, Clojure의 데이터 구조는 함수형 프로그래밍에 적합하며, 간결하고 가독성이 높은 코드를 작성할 수 있습니다.")])])}),[],!1,null,null,null);r.default=t.exports}}]);