(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{641:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"클로저-응용프로그램-구조화-전략-a-strategy-on-structuring-clojure-applications"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#클로저-응용프로그램-구조화-전략-a-strategy-on-structuring-clojure-applications"}},[t._v("#")]),t._v(" 클로저 응용프로그램 구조화 전략 (A Strategy on Structuring Clojure Applications)")]),t._v(" "),s("p",[t._v("(원제: Structuring Clojure Applications)")]),t._v(" "),s("p",[t._v("이 글에서는 제 프로젝트에서 유용하게 사용한 Clojure 애플리케이션 구조화 전략을 살펴보겠습니다.")]),t._v(" "),s("p",[t._v("순수한 기능 스타일로 애플리케이션을 작성한다는 아이디어는 매력적이지만, 실제로는 순수한 연산과 부작용을 분리하는 방법이 항상 명확하지는 않습니다. 이러한 목표를 달성하기 위한 방법으로 "),s("a",{attrs:{href:"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("클린 아키텍처"),s("OutboundLink")],1),t._v("의 변형된 접근 방식이 종종 제안됩니다. 이 방식은 애플리케이션의 순수 연산 코어를 감싸는 외부 레이어에서 IO를 처리해야 한다는 것입니다.")]),t._v(" "),s("p",[t._v("이 개념은 매력적이지만, 연산할 데이터의 총량을 미리 알 수 있는 경우에만 효과가 있습니다. 안타깝게도 대부분의 실제 애플리케이션에서 어떤 데이터가 필요한지 미리 파악하는 것은 불가능합니다. 대부분의 경우 입력 유형과 현재 처리 상태에 따라 조건부로 추가 데이터를 로드해야 하는 경우가 많습니다.")]),t._v(" "),s("p",[t._v("하지만 "),s("strong",[t._v("우리가 할 수 있는 일은 애플리케이션을 개별적으로 추론할 수 있는 작은 구성 요소로 분리하는 것입니다. 그런 다음 이러한 구성 요소를 함께 구성하여 더 복잡한 작업을 수행할 수 있습니다")]),t._v(". 저는 이것을 소프트웨어 개발의 레고 모델이라고 생각하고 싶습니다. 각 구성 요소는 레고 블록으로 볼 수 있으며, 다양한 문제를 해결하면서 이 레고 블록을 여러 가지 방식으로 구성할 수 있습니다.")]),t._v(" "),s("p",[t._v("해결하려는 문제는 노드가 상태를 계산하고 가장자리가 상태 간의 전환을 나타내는 그래프로 표현되는 워크플로로 표현할 수 있습니다. 이 그래프의 노드에 들어갈 때마다 입력을 살펴보고, 필요한 추가 데이터를 결정하고, 계산을 실행하고, 다음 상태로 전환합니다. 그래프의 각 노드는 특정 작업을 수행하는 레고 블록입니다. 이러한 노드는 데이터 흐름을 관리하는 코드 계층으로 연결됩니다.")]),t._v(" "),s("p",[t._v("위의 아키텍처를 구현하는 한 가지 접근 방식은 "),s("strong",[t._v("맵을 사용하여 전체 상태를 설명한 다음, 각각 특정 유형의 상태에 대해 작동하는 다중 메서드를 통과하여 새로운 상태를 생성하는 것")]),t._v("입니다. 각 멀티메서드는 상태 맵을 매개변수로 받아 몇 가지 연산을 수행한 다음 다음 멀티메서드에 전달되는 새 맵을 반환합니다. 이것이 상태 머신과 비슷하게 들린다고 생각하신다면 매우 정확합니다.")]),t._v(" "),s("p",[t._v("This post will take a look at a strategy for structuring Clojure applications that I've found useful in my projects.")]),t._v(" "),s("p",[t._v("While the idea of writing applications in a pure functional style is appealing, it's not always clear how to separate side effects from pure compuation in practice. Variations of "),s("a",{attrs:{href:"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clean Architecture"),s("OutboundLink")],1),t._v(" approach are often suggested as a way to accomplish this goal. This style dictates that IO should be handled in the outer layer that wraps pure computation core of the application.")]),t._v(" "),s("p",[t._v("While this notion is appealing, it only works in cases where the totality of the data that will be operated on is known up front. Unfortunately, it's impossible to know ahead of time what data will be needed in most real world applications. In many cases additional data needs to load conditionally based on the type of input and the current state of processing.")]),t._v(" "),s("p",[t._v("What we can do, however, is break up our application into small components that can be reasoned about in isolation. Such components can then be composed together to accomplish tasks of increased complexity. I like to think of this as a Lego model of software development. Each component can be viewed as a Lego block, and we can compose these Lego block in many different ways as we solve different problems.")]),t._v(" "),s("p",[t._v("The problem being solved can be expressed in terms of a workflow represented by a graph where the nodes compute the state, and the edges represent transitions between the states. Each time we enter a node in this graph, we look at the input, decide what additional data we may need, run the computation, and transition to the next state. Each node in the graph is a Lego block that accomplishes a particular task. These nodes are then connected by a layer of code governs the data flow.")]),t._v(" "),s("p",[t._v("One approach to implement the above architecture is to use a map to describe overall state, then pass it through multimethods that each operate on a particular type of state and produce a new one. Each multimethod takes the state map as a parameter, does some operations on it, and then returns a new map that gets passed to the next multimethod. If you're thinking that this sounds a like a state machine then you're very much correct.")]),t._v(" "),s("h3",{attrs:{id:"구현-implemention"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#구현-implemention"}},[t._v("#")]),t._v(" 구현 (Implemention)")]),t._v(" "),s("p",[t._v("실제로 어떤 모습인지 구체적인 예를 살펴보겠습니다. 한 사용자가 시스템을 사용하여 다른 사용자에게 이메일 송금을 보내려는 워크플로우가 있다고 가정해 보겠습니다. 여기서 처리할 수 있는 몇 가지 경우가 있습니다.")]),t._v(" "),s("p",[t._v("두 사용자가 모두 시스템에 있는 행복한 경로 시나리오가 있습니다. 이 경우 송금인 계좌에서 금액을 인출하여 수취인 계좌에 입금하기만 하면 됩니다.")]),t._v(" "),s("p",[t._v("또 다른 시나리오는 송금인이 거래를 처리하기에 충분한 자금이 없는 경우입니다. 이 경우 사용자가 자금을 더 추가할 때까지 트랜잭션을 일시 중단할 수 있습니다.")]),t._v(" "),s("p",[t._v("마지막으로, 송금을 받는 사용자가 시스템에 없을 수 있으며, 송금을 수락하기 전에 초대를 받아야 할 수도 있습니다.")]),t._v(" "),s("p",[t._v("외부 리소스와의 상호작용을 나타내는 몇 가지 도우미 함수를 정의하는 것으로 시작할 수 있습니다.")]),t._v(" "),s("p",[t._v("Let's take a look at a concrete example of what this looks like in practice. Say we have a workflow where one user would like to send an email money transfer to another user using our system. There are a few cases we might want to handle here.")]),t._v(" "),s("p",[t._v("There's the happy path scenario where both users are in the system. In this case we simply withdraw the amount from the payor account and deposit it into the payee account.")]),t._v(" "),s("p",[t._v("Another scenario could be that the payor does not have the sufficient funds to do the transaction. In this case we may want to suspend the transaction until the user adds more funds.")]),t._v(" "),s("p",[t._v("Finally, the user receiving the funds may not be in the system, and they need to be invited before they can accept the transfer.")]),t._v(" "),s("p",[t._v("We can start by defining a few helper functions that represent interactions with external resources.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atom")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":workflows")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),t._v("\n                              "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":id")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":from")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@foo.bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":to")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alice@bar.baz"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":amount")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":transfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                  "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@foo.bar"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alice@bar.baz"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defn")]),t._v(" persist "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":as")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap!")]),t._v(" store assoc-in "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":workflows")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defn")]),t._v(" query "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("store email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get-in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v(" email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defn")]),t._v(" load-state "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("store workflow-id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get-in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":workflows")]),t._v(" workflow-id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defn")]),t._v(" send-invite "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("println")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sending invite to"')]),t._v(" email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defn")]),t._v(" notify-user "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("email message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("println")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"notifying"')]),t._v(" email message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defn")]),t._v(" send-transfer "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("store from to amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("println")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"transfering from"')]),t._v(" from "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"to"')]),t._v(" to amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap!")]),t._v(" store\n          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("->")]),t._v(" %\n              "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update-in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v(" from "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" - amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update-in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v(" to "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" + amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("다음으로 워크플로우의 초기 상태를 나타내는 맵을 만들어 보겠습니다.")]),t._v(" "),s("p",[t._v("Next, we'll create a map to represent the initial state of the workfow.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":id")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":from")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@foo.bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":to")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alice@bar.baz"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":amount")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":transfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("맵에는 고유 ID, 사용자 입력을 나타내는 초기 데이터, 워크플로우의 현재 상태에 어떤 작업을 적용해야 하는지를 나타내는 "),s("code",[t._v(":action")]),t._v(" 키가 포함됩니다.")]),t._v(" "),s("p",[t._v("이제 "),s("code",[t._v(":action")]),t._v(" 키의 값에 따라 적절한 액션 핸들러를 디스패치하는 다중 메서드를 정의해 보겠습니다. 다중 메서드는 리소스 맵을 첫 번째 인수로 받습니다. 리소스는 데이터베이스 연결과 같은 IO 부작용을 처리하는 모든 코드를 나타냅니다. 워크플로우의 상태를 나타내는 맵은 두 번째 인수로 전달됩니다.")]),t._v(" "),s("p",[t._v("The map will contain a unique id, some initial data that represents user input, and an "),s("code",[t._v(":action")]),t._v(" key indicating what action should be applied to the current state of the workflow.")]),t._v(" "),s("p",[t._v("Let's define a multimethod that will dispatch the approprate action handler based on the value of the "),s("code",[t._v(":action")]),t._v(" key. The multimethod will accept a map of resources as the first argument. The resources represent any code that deals with IO side effects such as database connections. The map representing the state of the workflow will be passed in as the second argument.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defmulti")]),t._v(" handle-action "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_resources "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("이제 "),s("code",[t._v(":transfer")]),t._v(" 작업에 대한 핸들러를 정의할 수 있습니다. 이 다중 메서드는 데이터스토어에서 사용자에 대한 추가 데이터를 가져와 적절한 조치를 취한 후 워크플로의 다음 단계를 나타내는 업데이트된 "),s("code",[t._v(":action")]),t._v(" 키가 포함된 새 상태를 반환합니다.")]),t._v(" "),s("p",[t._v("We can now define a handler for the "),s("code",[t._v(":transfer")]),t._v(" operation. This multimethod will hydrate some additional data about the users from the datastore, take the appropriate action, and return a new state with the updated "),s("code",[t._v(":action")]),t._v(" key to indicate the next step in the workflow.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defmethod")]),t._v(" handle-action "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":transfer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("from to amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":as")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("from-info "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" from"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          to-info   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          available-funds "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),t._v(" from-info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          state     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("->")]),t._v(" state\n                        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":from")]),t._v(" merge from-info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":to")]),t._v(" merge to-info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("cond")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nil?")]),t._v(" to-info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assoc")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":invite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(">=")]),t._v(" available-funds amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send-transfer")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" from"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assoc")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":done")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("<")]),t._v(" available-funds amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assoc")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":notify-missing-funds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v(":invite")]),t._v(" 및 "),s("code",[t._v(":notify-missing-funds")]),t._v(" 액션에 대한 핸들러를 추가해 보겠습니다.")]),t._v(" "),s("p",[t._v("Let's add the handlers for "),s("code",[t._v(":invite")]),t._v(" and "),s("code",[t._v(":notify-missing-funds")]),t._v(" actions.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defmethod")]),t._v(" handle-action "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":notify-missing-funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("from"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":as")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify-user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" from"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"missing funds"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("persist")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assoc")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":transfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":await")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defmethod")]),t._v(" handle-action "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":invite")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":as")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send-invite")]),t._v(" to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("persist")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assoc")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":transfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":await")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v(":invite")]),t._v(" 및 "),s("code",[t._v(":notify-missing-funds")]),t._v("  액션은 상태를 유지하고 완료되면 "),s("code",[t._v(":await")]),t._v(" 액션을 반환한다는 점에 유의하세요. 이 동작을 사용하여 워크플로가 외부 액션에 의해 차단되어 일시 중단되어야 함을 나타냅니다.")]),t._v(" "),s("p",[t._v("마지막으로 상태 머신을 실행하는 함수를 추가하겠습니다. 이 함수는 워크플로우 ID와 함께 리소스가 포함된 맵을 받습니다. 이 함수는 현재 상태를 로드하고 위에서 정의한 다중 메서드를 디스패치하여 실행합니다.")]),t._v(" "),s("p",[t._v("Note that "),s("code",[t._v(":invite")]),t._v(" and "),s("code",[t._v(":notify-missing-funds")]),t._v(" actions persist the state and return the "),s("code",[t._v(":await")]),t._v(" action when they complete. We'll use this behavior to indicate that the workflow is blocked on an external action and needs to be suspended.")]),t._v(" "),s("p",[t._v("Finally, we'll add a function that executes the state machine. This function will accept a map containing the resources along with a workflow id. It will load the current state and execute it by dispatching the multimethod defined above.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defn")]),t._v(" run-workflow\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":as")]),t._v(" resources"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" workflow-id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load-state")]),t._v(" store workflow-id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("condp")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("->")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":done")]),t._v(" state\n      "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":workflow-suspended")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle-action")]),t._v(" resources state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("recur")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("간단하게 설명하기 위해 원자(atom) 하나를 모의 데이터 저장소로 사용하겠습니다.")]),t._v(" "),s("p",[t._v("For simplicity's sake let's use an atom as our mock data store.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atom")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":workflows")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),t._v("\n                              "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":id")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":from")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@foo.bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":to")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alice@bar.baz"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":amount")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":transfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                  "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@foo.bar"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                          "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alice@bar.baz"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("이제 REPL에서 이 워크플로를 실행해 볼 수 있습니다. 초기 상태로 실행하면 송금할 자금이 부족하여 워크플로우가 일시 중단된 것을 볼 수 있습니다.")]),t._v(" "),s("p",[t._v("We can now try running this workflow in the REPL. If we run it with the initial state, then we should see that the workflow was suspended because there were insufficient funds to transfer.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[t._v("=> "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run-workflow")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":store")]),t._v(" store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nnotifying bob"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("foo.bar missing funds\n"),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":workflow-suspended")]),t._v("\n")])])]),s("p",[t._v("워크플로에서 누락된 자금과 반환을 사용자에게 알리려고 시도합니다. 송금하려는 계정에 자금을 더 추가해 보겠습니다.")]),t._v(" "),s("p",[t._v("The workflow tries to notify the user of the missing funds and returns. Let's add more funds to the account trying to send the transfer.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[t._v("=> "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap!")]),t._v(" store assoc-in "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@foo.bar"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("워크플로가 중단된 지점부터 다시 시작되어 전송이 성공적으로 완료됩니다.")]),t._v(" "),s("p",[t._v("The workflow restarts where it left off and completes the transfer successfully.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[t._v("=> "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run-workflow")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":store")]),t._v(" store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ntransfering from bob"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("foo.bar to alice"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("bar.baz "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":id")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@foo.bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alice@bar.baz"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":amount")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":done")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"사이드이팩트-정형화하기-formalizing-side-effects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#사이드이팩트-정형화하기-formalizing-side-effects"}},[t._v("#")]),t._v(" 사이드이팩트 정형화하기 (Formalizing Side Effects)")]),t._v(" "),s("p",[t._v("프로토콜을 사용하여 리소스 제공자를 공식화함으로써 위의 구현을 한 단계 더 개선할 수 있습니다. 이렇게 하면 외부 의존성이 무엇인지 명확해지고 모킹이 쉬워집니다. 다음과 같이 "),s("code",[t._v("Notify")]),t._v("와 "),s("code",[t._v("DataStore")]),t._v(" 프로토콜을 만들어 봅시다.")]),t._v(" "),s("p",[t._v("We can make one futher improvement over the implementation above by formalizing resource providers using protocols. Doing so will make it clear what the external dependecies are and facilitate mocking. Let's create "),s("code",[t._v("Notify")]),t._v(" and "),s("code",[t._v("DataStore")]),t._v(" protocols that look as follows.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defprotocol")]),t._v(" Notify\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send-invite")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify-user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("email message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defprotocol")]),t._v(" DataStore\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("persist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_ state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_ email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add-funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_ email amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load-state")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_ workflow-id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send-transfer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_ from to amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("다음으로 이러한 프로토콜을 구현하는 몇 가지 레코드를 추가해 보겠습니다.")]),t._v(" "),s("p",[t._v("Next, let's add a couple of records that implement these protocols.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defrecord")]),t._v(" MockNotify "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  Notify\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send-invite")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_ email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("println")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sending invite to"')]),t._v(" email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify-user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_ email message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("println")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"notifying"')]),t._v(" email message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defrecord")]),t._v(" AtomDataStore "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  DataStore\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("persist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":as")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap!")]),t._v(" store assoc-in "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":workflows")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_  email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get-in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v(" email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add-funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_ email amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap!")]),t._v(" store assoc-in "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@foo.bar"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load-state")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_ workflow-id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("println")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get-in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":workflows")]),t._v(" workflow-id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send-transfer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_ from to amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("println")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"transfering from"')]),t._v(" from "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"to"')]),t._v(" to amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap!")]),t._v(" store\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("->")]),t._v(" %\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update-in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v(" from "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" - amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update-in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v(" to "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" + amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("또한 앞에서 정의한 함수를 단순히 호출하는 대신 'Notify' 프로토콜을 사용하도록 멀티 메서드를 수정해야 합니다.")]),t._v(" "),s("p",[t._v("We'll also need to modify our multimethods to use "),s("code",[t._v("Notify")]),t._v(" protocol instead of simply calling the functions we defined earlier.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defmethod")]),t._v(" handle-action "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":notify-missing-funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("store notify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("from"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":as")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify-user")]),t._v(" notify "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" from"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"missing funds"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("persist")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assoc")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":transfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":await")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defmethod")]),t._v(" handle-action "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":invite")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("store notify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":keys")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":as")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send-invite")]),t._v(" notify to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("persist")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assoc")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":transfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":await")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("마지막으로 레코드를 인스턴스화하여 '실행 워크플로' 함수에 전달합니다.")]),t._v(" "),s("p",[t._v("Finally, we'll instantiate the records and passing them to our "),s("code",[t._v("run-workflow")]),t._v(" function.")]),t._v(" "),s("div",{staticClass:"language-clojure extra-class"},[s("pre",{pre:!0,attrs:{class:"language-clojure"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("->AtomDataStore")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("atom")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":workflows")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),t._v("\n                                                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":id")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),t._v("\n                                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":from")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@foo.bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":to")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alice@bar.baz"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":amount")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n                                                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":action")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":transfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                                    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@foo.bar"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                                            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alice@bar.baz"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":funds")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" notify "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("->MockNotify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run-workflow")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":store")]),t._v(" store\n                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":notify")]),t._v(" notify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n              "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add-funds")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob@foo.bar"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run-workflow")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":store")]),t._v(" store\n                "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":notify")]),t._v(" notify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n              "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"33a19b1f-c7d1-45d8-9864-0ea17e01a26d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"토론-discussion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#토론-discussion"}},[t._v("#")]),t._v(" 토론(Discussion)")]),t._v(" "),s("p",[t._v("위의 접근 방식에는 애플리케이션을 구축할 때 특히 유용하다고 생각되는 몇 가지 측면이 있습니다.")]),t._v(" "),s("p",[t._v("각각의 다중 메서드는 독립적으로 추론하고 테스트할 수 있는 작은 프로그램으로 취급할 수 있습니다. 이러한 다중 메서드는 클린 아키텍처 스타일을 사용하여 에지에 IO를 유지하면서 쉽게 구조화할 수 있습니다.")]),t._v(" "),s("p",[t._v("리소스를 명시적 파라미터로 전달하면 계산에서 IO를 분리할 수 있습니다. 이 설계는 데이터 저장소와 같은 리소스가 명시적으로 전달되므로 테스트에 적합합니다. 나머지 코드를 변경하지 않고도 테스트를 실행할 때 모의 리소스 맵을 전달할 수 있습니다. 실제로 모의 리소스를 대상으로 개발을 시작하고 데이터베이스나 다른 시스템에 연결하는 것에 대해 걱정할 필요 없이 워크플로 로직이 의도한 대로 작동하는지 확인할 수 있습니다.")]),t._v(" "),s("p",[t._v("맵을 사용하여 실행 상태를 추적하면 쉽게 검사할 수 있습니다. 이 맵을 기록하여 어떤 작업을 수행 중인지, 데이터가 어떻게 보이는지 등을 확인할 수 있습니다. 또한 상태를 쉽게 직렬화할 수 있으므로 필요에 따라 연산을 일시 중단했다가 다시 시작할 수 있습니다. 이는 앞서 살펴본 것처럼 외부 작업을 기다리는 동안 워크플로를 일시 중단해야 하는 경우에 특히 유용합니다.")]),t._v(" "),s("p",[t._v("이 설계는 스테이트풀 리소스를 포함하는 시스템 맵을 관리하는 데 사용할 수 있는 Integrant와도 잘 어울립니다.")]),t._v(" "),s("p",[t._v("가장 중요한 점은 이러한 유형의 아키텍처는 암시적 결합 없이 재사용 가능한 구성 요소를 생성한다는 것입니다. 각 멀티메소드는 다른 멀티메소드와 독립적으로 사용할 수 있으며, 서로 다른 워크플로로 구성할 수 있습니다. 이를 통해 더 큰 구조를 구축하는 데 사용할 수 있는 컴포저블(조합가능한) 레고 블록을 얻을 수 있습니다.")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://github.com/weavejester/integrant",target:"_blank",rel:"noopener noreferrer"}},[t._v("Integrant"),s("OutboundLink")],1),t._v(": Integrant는 데이터 기반 아키텍처로 애플리케이션을 구축하기 위한 Clojure(및 ClojureScript) 마이크로 프레임워크입니다. 컴포넌트 또는 마운트의 대안으로 생각할 수 있으며, Arachne에서 영감을 받아 Duct 작업을 통해 만들어졌습니다. Integrant is a Clojure (and ClojureScript) micro-framework for building applications with data-driven architecture. It can be thought of as an alternative to Component or Mount, and was inspired by Arachne and through work on Duct.")])]),t._v(" "),s("p",[t._v("There are several aspects of the above approach that I've found to be particularly useful when building applications.")]),t._v(" "),s("p",[t._v("Each multimethod can be treated as a small program that can be reasoned about and tested independently. These multimethods can easily be structured using Clean Architecture style keepng IO at the edges.")]),t._v(" "),s("p",[t._v("Passing resources in as an explicit parameter allows decoupling IO from computation. This design lends itself well to testing since resources, such as the data store, are passed in explicitly. We can pass in a map of mock resources when running tests without any changes to the rest of the code. In fact, we can start developing against mock resources and ensure that the workflow logic works as intended before having to worry about connecting to databases or other systems.")]),t._v(" "),s("p",[t._v("Using a map to track the state of the execution makes it easy to inspect it. We can log this map to see what operation we're doing, what the data looks like, and so on. The state can also be easily serialized, allowing us to suspend and resume computation as needed. This is particularly useful in cases when the workflow needs to be suspended pending some external action as we saw earlier.")]),t._v(" "),s("p",[t._v("This design also plays well with Integrant which can be used to manage the system map containing stateful resources.")]),t._v(" "),s("p",[t._v("Most importantly, this type of architecture creates reusable components without implicit coupling. Each multimethod can be used indepenently of the others, and composed into different workflows. This gives us composable Lego blocks that we can use to build larger structures.")]),t._v(" "),s("ul",[s("li",[t._v("원문: "),s("a",{attrs:{href:"https://yogthos.net/posts/2022-12-18-StructuringClojureApplications.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Structuring Clojure Applications"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);